import{w as a,q as e}from"./index-CLLJqTva.js";import"./index-BMu1d4kC.js";import{S as h,a as o}from"./index-CP53eZP4.js";import{R as i,H as n,a as t,I as s}from"./index-Dq_L-XFB.js";import"./index-H-X4gc9i.js";const d="/assets/strings-DYFOT5r1.pdf",c="Day 6: Strings",x=["Strings","Immutability","Length","Concatenation","Equals","Compare To","Basic String Methods","Project 1","Lab 3"],j=()=>e.jsxs(e.Fragment,{children:[e.jsx(h,{title:c,downloadHref:d}),e.jsxs(o,{children:[e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:c})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Agenda"}),e.jsx("ul",{className:"list-disc",children:x.map((r,l)=>e.jsx("li",{children:r},l))})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Strings"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Review"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["To create a string, our data type is a ",e.jsx("code",{children:"String"}),". We then give a variable name. We can then set it to a value surrounded by double-quotes."]})}),e.jsx(t,{children:e.jsx(s,{space:0,children:'String <variable name> = "";'})})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Immutability"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"Strings are immutable, this means we cannot change a string by removing a value or changing a value."}),e.jsx("p",{children:"However, we can add to a string by concatenation."})]}),e.jsxs(t,{children:[e.jsx(s,{space:0,children:'String s = "hello";'}),e.jsx(s,{space:0,children:'s = s + " world";'}),e.jsx(s,{space:0,children:"System.out.println(s); // hello world"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Immutability"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"While this is okay, the problem with this is that it creates a new string in memory. If we're creating small strings, this isn't so bad. But when we keep adding to it, we keep creating new strings in memory. This is bad."})}),e.jsxs(t,{children:[e.jsx(s,{space:0,children:'String s = "hello";'}),e.jsx(s,{space:0,children:'s = s + " world"; // Different than the first s.'}),e.jsx(s,{space:0,children:"System.out.println(s); // hello world"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Length"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["With strings, we can get the length of the string using the ",e.jsx("code",{children:".length()"})," method."]})}),e.jsxs(t,{children:[e.jsx(s,{children:'String s = "Hello World";'}),e.jsx(s,{children:"System.out.println(s.length());"}),e.jsx(s,{children:"//outputs 11"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Length use"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"This is especially important if we want to loop/iterate through a string."}),e.jsxs("p",{children:["We can use the ",e.jsx("code",{children:"charAt"})," method to get the at each index/location."]})]}),e.jsxs(t,{children:[e.jsx(s,{children:'String s = "Hello World";'}),e.jsx(s,{children:"for(int i = 0; i < s.length(); i++) {"}),e.jsx(s,{space:1,children:"System.out.println(s.charAt(i));"}),e.jsx(s,{children:"}"}),e.jsx(s,{children:"// Prints out each character"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Concatenation"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:`We've seen this already before, but adding any value to a string will "concatenate" the value. This simply extends the string and creates a new and longer string.`})}),e.jsxs(t,{children:[e.jsx(s,{children:'String a = "Hello";'}),e.jsx(s,{children:'a = a + " World";'}),e.jsx(s,{children:"System.out.println(a);"}),e.jsx(s,{children:'// Outputs "Hello World"'})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"String Equality"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"You may have noticed before that the following code gives us a false value."}),e.jsxs("p",{children:["This is because, with Java Strings, we cannot compare those two values directly using the ",e.jsx("code",{children:"=="})," operator."]})]}),e.jsxs(t,{children:[e.jsx(s,{children:'System.out.print("Continue? ");'}),e.jsx(s,{children:"String choice = input.nextLine();"}),e.jsx(s,{children:'if(choice == "n") {'}),e.jsx(s,{space:1,children:'System.out.println("Continuing");'}),e.jsx(s,{children:"}"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"String Equality"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"However, the following code prints true somehow. Why?"})}),e.jsxs(t,{children:[e.jsx(s,{children:'String a = "Hello";'}),e.jsx(s,{children:'String b = "Hello";'}),e.jsx(s,{children:"System.out.println(a == b);"}),e.jsx(s,{children:"// outputs true"})]})]})]}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"The answer lies in memory and how Java optimizes it."})}),e.jsxs(t,{children:[e.jsx(s,{children:'String a = "Hello";'}),e.jsx(s,{children:"// say a is stored at 0x1234abc;"}),e.jsx(s,{children:'String b = "Hello";'}),e.jsx(s,{children:"// Java sees the values being the same and reuses the same memory location at 0x1234abc"})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:['But in this case, the "n" is not the same memory location as the string in ',e.jsx("code",{children:"choice"}),", even if it holds the same value."]})}),e.jsxs(t,{children:[e.jsx(s,{children:'System.out.print("Continue? ");'}),e.jsx(s,{children:"String choice = input.nextLine(); // say, choice is at 0x1282acd"}),e.jsx(s,{children:'if(choice == "n") { // say "n" is at 0x1829bed'}),e.jsx(s,{space:1,children:'System.out.println("done");'}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"So how can we check for String equality?"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"equals"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsxs("p",{children:["We can use the ",e.jsx("code",{children:".equals"})," method. This wll check if the values in the Strings are the same."]}),e.jsxs("p",{children:["This method takes in another String and returns ",e.jsx("code",{children:"true"})," if they are identical in ",e.jsx("strong",{children:"value"}),", not in memory."]})]}),e.jsxs(t,{children:[e.jsx(s,{children:'System.out.print("Continue? ");'}),e.jsx(s,{children:"String choice = input.nextLine();"}),e.jsx(s,{children:'if(choice.equals("n")) {'}),e.jsx(s,{space:1,children:'System.out.println("done");'}),e.jsx(s,{children:'} // will print "done" if choice is exactly "n"'})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"equalsIgnoreCase"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["If we don't care about case sensitivity, then we can use the ",e.jsx("code",{children:"equalsIgnoreCase"})," method. This does the same, but ignores the case of the string, checking if they match that way."]})}),e.jsxs(t,{children:[e.jsx(s,{children:'System.out.print("Continue? ");'}),e.jsx(s,{children:"String choice = input.nextLine();"}),e.jsx(s,{children:'if(choice.equalsIgnoreCase("n")) {'}),e.jsx(s,{space:1,children:'System.out.println("done");'}),e.jsx(s,{children:'} // prints "done" as long as choice is "N" or "n"'})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"compareTo"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsxs("p",{children:["If we want to compare two strings, we cannot use the < and > operators. Instead, we must use the ",e.jsx("code",{children:"compareTo"})," method."]}),e.jsx("p",{children:'This will return a negative number, 0, or a positive number depending on whether the other string is "greater", "lesser", or "equal" to the string. These compare the ASCII values.'})]}),e.jsxs(t,{children:[e.jsx(s,{children:'String a = "hello";'}),e.jsx(s,{children:'String b = "Hello";'}),e.jsx(s,{children:"System.out.println(a.compareTo(b));"}),e.jsx(s,{children:"// gives -32"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"ASCII Table"}),e.jsx("a",{href:"https://www.asciitable.com",target:"_blank",children:"asciitable.com"})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"compareToIgnoreCase"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["If we want to compare two strings but ignore case sensitivity, we can use ",e.jsx("code",{children:"compareToIgnoreCase"}),". The return values are the same, but ignore case sensitivity."]})}),e.jsxs(t,{children:[e.jsx(s,{children:'String a = "hello";'}),e.jsx(s,{children:'String b = "Hello";'}),e.jsx(s,{children:"System.out.println(a.compareTo(b));"}),e.jsx(s,{children:"// gives 0"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"String Functions"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("ul",{children:["substring","charAt","indexOf","lastIndexOf","replace","split","startsWith","strip","toCharArray","toLowerCase","toUpperCase","trim"].map((r,l)=>e.jsx("li",{children:r},l))})}),e.jsx(n,{children:e.jsx("a",{href:"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html",children:"Java Documentation for Strings"})})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Javadoc"})}),e.jsx("section",{children:e.jsx("p",{children:"Explore the javadoc page with Strings. These are all of the methods we can call on a String."})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Project 1"})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Password Validator and Generator"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Task"}),e.jsxs("ul",{children:[e.jsx("li",{children:"You will create a simple Password Validator and Generator"}),e.jsx("li",{children:"The user will be given two options after logging in. They can validate a password or generate a new password."}),e.jsx("li",{children:"You will store a username and password in the program, by updating the variables in the code to save a login credential."})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Password Validation"}),e.jsx("p",{children:'For a password to be "valid", it must satisfy the following requirements:'}),e.jsxs("ul",{children:[e.jsx("li",{children:"At least 8 characters long."}),e.jsx("li",{children:"Contain 1 uppercase character."}),e.jsx("li",{children:"Contain 1 lowercase character."}),e.jsx("li",{children:"Contain 1 digit."})]}),e.jsx("p",{children:"Ask the user to input the password they want to validate."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Checking for uppercase"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"We can simply check if the character is greater than the character of 'A' and less than the character of 'Z'"})}),e.jsxs(t,{children:[e.jsx(s,{children:"char c = 'H';"}),e.jsx(s,{children:"c >= 'A' && c <= 'Z'; // evals to true"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Checking for uppercase"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"This works because characters actually use ASCII to represent the data."}),e.jsx("p",{children:e.jsx("a",{href:"https://www.asciitable.com",target:"_blank",children:"asciitable.com"})}),e.jsx("p",{children:"Ultimately, characters still represent numbers."})]}),e.jsxs(t,{children:[e.jsx(s,{children:"char c = 'H';"}),e.jsx(s,{children:"c >= 'A' && c <= 'Z'; // evals to true"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Generating an uppercase character"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"In order to generate a random uppercase character, we would simply get a random number from 0 to 26, then shift it by the character of 'A'."}),e.jsx("p",{children:"This works as 'A' is the character representation for the decimal value of 65. This means we're basically adding 65 to our number, then casting it to a character."})]}),e.jsx(t,{children:e.jsx(s,{children:"char c = (char) ((Math.random() * 26) + 'A');"})})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Generating a password"}),e.jsx("p",{children:"Ask the user for the length of the password, then create a string with random uppercase letters, lowercase letters, and digits. The password should be at least 8 characters long."})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Lab 3"})})]})]}),y=a(j);export{y as default};
