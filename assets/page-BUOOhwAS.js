import{w as c,t as e}from"./index-CiYINecr.js";import"./index-ZQYjAMWU.js";import{S as d,a as o}from"./index-DiHAfNbc.js";import{R as i,H as n,a as l,I as s}from"./index-fNlsy8Tv.js";import{s as h}from"./java-CnbYup62.js";import"./index-CFi-U94j.js";const a="Day 7: StringBuilder + Arrays",x=["StringBuilder","Stack v Heap","Array","Lab 4"],j=()=>e.jsxs(e.Fragment,{children:[e.jsx(d,{title:a,downloadHref:h}),e.jsxs(o,{children:[e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:a})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Agenda"}),e.jsx("ul",{className:"list-disc",children:x.map((r,t)=>e.jsx("li",{children:r},t))})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"String Concatenation not always good"}),e.jsx("p",{children:"As we said on Wednesday, constantly concatenating to Strings isn't ideal. It ends up creating too many new objects in memory."}),e.jsx("p",{children:"So how can we effectively add to a string?"})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"StringBuilder"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"StringBuilder"}),e.jsx("p",{children:`Just like Scanner, this is another "class" we can use. However, unlike Scanner, StringBuilder doesn't have to be imported at the top.`}),e.jsxs("p",{children:["This is because StringBuilder comes from ",e.jsx("code",{children:"java.lang"})," system. This means that it's already automatically imported for us, just like how Math is automatically imported for us."]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"What"}),e.jsx("p",{children:"StringBuilder allows us to construct a new String by adding values into a String buffer. Additionally, using a StringBuilder, we can alos remove values from a String."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Why"}),e.jsx("p",{children:"Well, it is more memory efficient as each addition doesn't create a new string in memory. Instead, it adds the value into a buffer, that continues to get updated until we call a function to give us the string."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"How"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"We can create a new StringBuilder using the same format as our Scanner."})}),e.jsxs(l,{children:[e.jsx(s,{children:e.jsx("span",{className:"text-usf-yellow",children:"StringBuilder s = new StringBuilder();"})}),e.jsx(s,{children:'s.append("hello");'}),e.jsx(s,{children:'s.append(" world");'}),e.jsx(s,{children:"String str = s.toString();"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"How"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"We can then call append on the variable containing the StringBuilder."}),e.jsx("p",{children:"This will append a string into the current StringBuilder."})]}),e.jsxs(l,{children:[e.jsx(s,{children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{children:e.jsx("span",{className:"text-usf-yellow",children:'s.append("hello");'})}),e.jsx(s,{children:e.jsx("span",{className:"text-usf-yellow",children:'// s contains "hello"'})}),e.jsx(s,{children:'s.append(" world");'}),e.jsx(s,{children:"String str = s.toString();"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"How"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"When we call append again, the StringBuilder will add the new value, but won't create a new String in memory. It'll continue adding until we stop."})}),e.jsxs(l,{children:[e.jsx(s,{children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{children:'s.append("hello");'}),e.jsx(s,{children:'// s contains "hello"'}),e.jsx(s,{children:e.jsx("span",{className:"text-usf-yellow",children:'s.append(" world");'})}),e.jsx(s,{children:e.jsx("span",{className:"text-usf-yellow",children:'// s contains "hello world"'})}),e.jsx(s,{children:"String str = s.toString();"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"How"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["In order to get the string out, we simply call ",e.jsx("code",{children:"toString"})," on the variable containing the StringBuilder. This gives us the final resulting string!"]})}),e.jsxs(l,{children:[e.jsx(s,{children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{children:'s.append("hello");'}),e.jsx(s,{children:'// s contains "hello"'}),e.jsx(s,{children:'s.append(" world");'}),e.jsx(s,{children:'// s contains "hello world"'}),e.jsx(s,{children:e.jsx("span",{className:"text-usf-yellow",children:"String str = s.toString();"})}),e.jsx(s,{children:e.jsx("span",{className:"text-usf-yellow",children:'// Gives us "helo world"'})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Removing values (deleteCharAt)"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"Let's say we want to remove a value from our StringBuilder."}),e.jsxs("p",{children:["We can call ",e.jsx("code",{children:"deleteCharAt(index)"})," where index is the location of the value we want to remove."]})]}),e.jsxs(l,{children:[e.jsx(s,{children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{children:'s.append("hello world!");'}),e.jsx(s,{children:"s.deleteCharAt(s.length() - 1);"}),e.jsx(s,{children:'s.toString(); // gives us "hello world"'})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Removing values (delete)"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["Alternatively, we can also call the ",e.jsx("code",{children:"delete(startIndex, endIndex)"})," to delete a substring from our StringBuilder."]})}),e.jsxs(l,{children:[e.jsx(s,{children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{children:'s.append("hello world!");'}),e.jsx(s,{children:'s.delete(5, 11); // remvoe "world"'}),e.jsx(s,{children:'s.toString(); // gives us "hello"'})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Getting the String"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["When we want to get the string from the StringBuilder, we can simply call the ",e.jsx("code",{children:"toString()"})," function!"]})}),e.jsxs(l,{children:[e.jsx(s,{children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{children:'s.append("hello");'}),e.jsx(s,{children:'s.append(" world");'}),e.jsx(s,{children:'String str = s.toString(); // gives us "hello world"'})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"StringBuffer?"}),e.jsxs("p",{children:["If you look up StringBuilder, you may also find ",e.jsx("code",{children:"StringBuffer"}),"."]}),e.jsx("p",{children:"For all intensive purposes of this class, they are the same."})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Memory Access"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Memory?"}),e.jsx("p",{children:"You may have noticed that I've mentioned memory a lot in class..."}),e.jsx("p",{children:"I'm not just bringing it up to be annoying, it is an important topic to talk about when we think about our programs."})]}),e.jsx("section",{children:e.jsx("p",{children:"The size of a data type matters to how we design our programs. Understanding that some types are bigger than others means we can create our programs to cater to these needs better."})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Stack and Heap"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Stack and Heap"}),e.jsxs("p",{children:["Our memory is split into two main concepts called the ",e.jsx("strong",{children:"Stack"})," and ",e.jsx("strong",{children:"Heap"})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Differences"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"Stack"}),e.jsx("ul",{children:["Contains methods/function calls","Local method primitive values/variables stored","References to Objects used by methods/functions","Deallocated/freed space when methods/functions are done","Variables in Stack are freed once method is done"].map((r,t)=>e.jsx("li",{children:r},t))})]}),e.jsxs(n,{children:[e.jsx("p",{children:"Heap"}),e.jsx("ul",{children:["Contains Objects","References to location of Objects in Heap, sent to Stack","Garbage Collected to free memory when objects are out of scope/no longer in use","Objects created in Heap exists throughout the program globally until garbage collected"].map((r,t)=>e.jsx("li",{children:r},t))})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Garbage Collection?"}),e.jsxs("ul",{children:[e.jsx("li",{children:"Automatic process done by the JVM to clear memory from the Heap"}),e.jsx("li",{children:"Common in some other languages such as Go, JavaScript, Python"})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Array"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Array?"}),e.jsx("p",{children:"In Python, you should've learned about Lists. The data structure that uses [] and allows you to use indexes, add, and remove values from it."}),e.jsx("p",{children:"In Java, we have a similar structure called an Array. This also uses [] and we can index it, but we cannot add to it nor remove values from it. We can only get and set values in it."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Creating an array"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"We can create an array using the following notion."}),e.jsx("p",{children:"Similar to any regular variable, we must give it a data type with square brackets after the type."}),e.jsxs("p",{children:["We will set it equal to a ",e.jsx("code",{children:"new"})," array. The ",e.jsx("code",{children:"<data type>"})," is the same in both cases. In this case, we must give it a size."]})]}),e.jsx(l,{children:e.jsx(s,{children:"<data type>[] variable = new <data type>[size];"})})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"int array example"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"This will initialize an integer array with a size of 10 elements"})}),e.jsx(l,{children:e.jsx(s,{children:"int[] array = new int[10];"})})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"int array example (pre-set)"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"Alternatively, we can set the values in the array without setting the size."}),e.jsx("p",{children:"The example to the right will initialize an array with the values of 1-6"})]}),e.jsx(l,{children:e.jsx(s,{children:"int[] array = { 1, 2, 3, 4, 5, 6 };"})})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Getting values"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"Alternatively, we can set the values in the array without setting the size."}),e.jsx("p",{children:"The example to the right will initialize an array with the values of 1-6"})]}),e.jsx(l,{children:e.jsx(s,{children:"int[] array = { 1, 2, 3, 4, 5, 6 };"})})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Getting values"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"We can get values using square brackets and indexes, just like we can in Python."})}),e.jsxs(l,{children:[e.jsx(s,{children:"int[] arr = { 1, 4, 9, 16, 25 };"}),e.jsx(s,{children:"System.out.println(arr[0]); // gives us 1"}),e.jsx(s,{children:"System.out.println(arr[4]); // gives us 25"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Setting values"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"Similar to how we can do it in Python, we can set values using the index."})}),e.jsxs(l,{children:[e.jsx(s,{children:"int[] arr = { 1, 4, 9, 16, 25 };"}),e.jsx(s,{children:"arr[3] = 4;"}),e.jsx(s,{children:"System.out.println(arr[3]); // gives u 4"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Types?"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"One of the major differences between a Python list and a Java array is that a java array must contain a single type. Python lists can contain multiple types and values, but a Java array must keep the same type."})}),e.jsxs(l,{children:[e.jsx(s,{children:"int arr[] = new int[10];"}),e.jsx(s,{children:"arr[0] = 1;"}),e.jsx(s,{children:'arr[1] = "3"; // not allowed!'})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Length"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"We can also get the length of an array using the length property."}),e.jsx("p",{children:"This one doesn't use parentheses since it isn't a function, but rather a property of arrays."})]}),e.jsxs(l,{children:[e.jsx(s,{children:"int[] arr = { 1, 2, 3, 4, 5, 6 };"}),e.jsx(s,{children:"System.out.println(arr.length); // Gives us 6"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Iterating through an array"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["We can use a ",e.jsx("code",{children:"for loop"})," to iterate through an array using the indexes of the array and the length of the array."]})}),e.jsxs(l,{children:[e.jsx(s,{children:"int[] arr = new int[11];"}),e.jsx(s,{children:"for(int i = 0; i < arr.length; i++) {"}),e.jsx(s,{space:1,children:"arr[i] = i * i;"}),e.jsx(s,{children:"}"}),e.jsx("p",{children:"// Stores the squares into the array"}),e.jsx("p",{children:"// 0 1 4 9 16 25 36 49 64 81 100"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"For each/enhanced for loop"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsxs("p",{children:["We have another way of looping through a collection using a ",e.jsx("code",{children:"for loop"}),". It looks a little different, but it's called a ",e.jsx("code",{children:"for-each"})," or a ",e.jsx("code",{children:"enhanced for loop"}),"."]}),e.jsx("p",{children:"Different notation and uses a colon."}),e.jsx("p",{children:"The left is the type of a single value in the collection. The right of the colon is the collection itself."})]}),e.jsxs(l,{children:[e.jsx(s,{children:"int[] arr = { 1, 4, 9, 16, 25, 36 };"}),e.jsx(s,{children:"for(int i : arr) {"}),e.jsx(s,{space:1,children:'System.out.print(i + " ");'}),e.jsx(s,{children:"}"}),e.jsx("p",{children:"// Gives 1 4 9  16 25 36"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"For each/enhanced for loop"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"This one actually uses colons. The regular for loop uses semi-colons."}),e.jsx("p",{children:e.jsx("strong",{children:"be careful/mindful about the difference!"})})]}),e.jsxs(l,{children:[e.jsx(s,{children:"int[] arr = { 1, 4, 9, 16, 25, 36 };"}),e.jsx(s,{children:"for(int i : arr) {"}),e.jsx(s,{space:1,children:'System.out.print(i + " ");'}),e.jsx(s,{children:"}"}),e.jsx("p",{children:"// Gives 1 4 9  16 25 36"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"When?"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"Regular for loop:"}),e.jsxs("ul",{children:[e.jsx("li",{children:"Index is necessary"}),e.jsx("li",{children:"Changing array with index"})]})]}),e.jsxs(n,{children:[e.jsx("p",{children:"Enhanced for loop"}),e.jsxs("ul",{children:[e.jsx("li",{children:"Index not necessary, just need the value"}),e.jsx("li",{children:"Only need to read values from a collection"})]})]})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Lab 4"})})]})]}),f=c(j);export{f as default};
