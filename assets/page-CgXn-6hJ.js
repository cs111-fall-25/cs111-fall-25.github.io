import{t as e,w as a}from"./index-CiYINecr.js";import"./index-Cmt5KAOE.js";import{S as r,a as c}from"./index-BKGkjF1z.js";import"./index-CzO65JFU.js";const i=({children:n})=>e.jsx("div",{className:"flex flex-row text-[16pt] text-left space-x-10 space-around",children:n}),s=({children:n})=>e.jsx("div",{className:"w-1/2",children:n}),d="/assets/java-basics-CXJ3Ak6p.pdf",t="Day 2: Java Basics",h=["Variables","Primitive Data Types","Naming Conventions","Brief Intro to Strings","Output","Lab 1: Printing Data"],o=()=>e.jsxs(e.Fragment,{children:[e.jsx(r,{title:t,downloadHref:d}),e.jsxs(c,{children:[e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:t})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Agenda"}),e.jsx("ul",{className:"list-disc",children:h.map((n,l)=>e.jsx("li",{children:n},l))})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Variables"})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"In order to create a variable in Java, we must follow this format."}),e.jsx("br",{}),e.jsx("p",{children:"We can declare a variable to be set/initialized later."}),e.jsx("p",{children:"We must then initialize it with a value later."}),e.jsx("p",{children:"We can also combine it into a single line as seen in the third case."})]}),e.jsxs(s,{children:[e.jsx("p",{children:"Variable Declaration:"}),e.jsx("p",{children:e.jsx("code",{children:"<type> <variable name>;"})}),e.jsx("p",{children:"Variable Initialization:"}),e.jsx("p",{children:e.jsx("code",{children:"<variable name> = <value>;"})}),e.jsx("p",{children:"Combined:"}),e.jsx("p",{children:e.jsx("code",{children:"<type> <variable name> = <value>;"})})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(s,{children:e.jsx("p",{children:"Java is a semi-colon language, so we must add a semi-colon at the end of the line to denote the line has ended."})}),e.jsxs(s,{children:[e.jsx("p",{children:"Variable Declaration:"}),e.jsx("p",{children:e.jsx("code",{children:"<type> <variable name>;"})}),e.jsx("p",{children:"Variable Initialization:"}),e.jsx("p",{children:e.jsx("code",{children:"<variable name> = <value>;"})}),e.jsx("p",{children:"Combined:"}),e.jsx("p",{children:e.jsx("code",{children:"<type> <variable name> = <value>;"})})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(s,{children:e.jsx("p",{children:"What do I mean by <type>?"})}),e.jsxs(s,{children:[e.jsx("p",{children:"Variable Declaration:"}),e.jsx("p",{children:e.jsx("code",{children:"<type> <variable name>;"})}),e.jsx("p",{children:"Variable Initialization:"}),e.jsx("p",{children:e.jsx("code",{children:"<variable name> = <value>;"})}),e.jsx("p",{children:"Combined:"}),e.jsx("p",{children:e.jsx("code",{children:"<type> <variable name> = <value>;"})})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Data Types"})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:'Java has 8 primary "primitive" data types. These are shown on the right:'}),e.jsx("p",{children:"These data types represent the way data is stored in Java. They are required when defining variables and later functions."})]}),e.jsx(s,{children:e.jsxs("ol",{children:[e.jsx("li",{children:"byte"}),e.jsx("li",{children:"short"}),e.jsx("li",{children:"char"}),e.jsx("li",{children:"int"}),e.jsx("li",{children:"long"}),e.jsx("li",{children:"float"}),e.jsx("li",{children:"double"}),e.jsx("li",{children:"boolean"})]})})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(s,{children:e.jsx("p",{children:"These primitive data types don't have methods attached to them. They exist on their own and simply represent some value, but we don't have functions that connect to the type."})}),e.jsx(s,{children:e.jsxs("ol",{children:[e.jsx("li",{children:"byte"}),e.jsx("li",{children:"short"}),e.jsx("li",{children:"char"}),e.jsx("li",{children:"int"}),e.jsx("li",{children:"long"}),e.jsx("li",{children:"float"}),e.jsx("li",{children:"double"}),e.jsx("li",{children:"boolean"})]})})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:'For example, with a "char", we cannot use a ".toUpperCase()" on it.'}),e.jsx("p",{children:"This will make more sense when we talk more about Strings."})]}),e.jsx(s,{children:e.jsxs("ol",{children:[e.jsx("li",{children:"byte"}),e.jsx("li",{children:"short"}),e.jsx("li",{children:"char"}),e.jsx("li",{children:"int"}),e.jsx("li",{children:"long"}),e.jsx("li",{children:"float"}),e.jsx("li",{children:"double"}),e.jsx("li",{children:"boolean"})]})})]})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Byte"}),e.jsxs(i,{children:[e.jsx(s,{children:e.jsxs("p",{children:["A byte represents an 8-bit signed ",e.jsx("strong",{children:"two's complement"})," integer storing values from -128 to 127 (-2",e.jsx("sup",{className:"leading-8",children:"8"})," to 2",e.jsx("sup",{children:"8"}),"-1)"]})}),e.jsxs(s,{children:[e.jsx("p",{children:"Example of a byte variable:"}),e.jsx("p",{children:e.jsx("code",{children:"byte x = 120;"})}),e.jsx("p",{children:"OR"}),e.jsx("p",{children:e.jsx("code",{children:"byte x = -52;"})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Two's Complement?"}),e.jsx("p",{children:"Remember binary from 110?"}),e.jsx("p",{children:"A Two's Complement means the first bit in the binary value defines whether the value is positive or negative."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Binary"}),e.jsx("p",{children:"Let's review binary quickly first, then we can see this Two's Complement in action!"}),e.jsx("p",{children:"Let's say we have the binary value of 110."}),e.jsx("p",{children:"What is the decimal of that?"})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Binary"}),e.jsx("p",{children:"Let's review binary quickly first, then we can see this Two's Complement in action!"}),e.jsx("p",{children:"Let's say we have the binary value of 110."}),e.jsx("p",{children:"What is the decimal of that?"}),e.jsx("p",{children:"Remember, binary works with powers of 2."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Binary"}),e.jsx("p",{children:"Let's review binary quickly first, then we can see this Two's Complement in action!"}),e.jsx("p",{children:"Let's say we have the binary value of 110."}),e.jsx("p",{children:"What is the decimal of that?"}),e.jsx("p",{children:"Remember, binary works with powers of 2."}),e.jsxs("p",{children:["110 = 1 * 2 ",e.jsx("sup",{className:"leading-8",children:"2"})," + 1 * 2 ",e.jsx("sup",{children:"1"})," + 0 * 2 ",e.jsx("sup",{children:"0"})," = 6"]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Negative binary?"}),e.jsxs("div",{className:"text-[16pt]",children:[e.jsxs("p",{children:["110 = 1 * 2 ",e.jsx("sup",{className:"leading-8",children:"2"})," + 1 * 2 ",e.jsx("sup",{children:"1"})," + 0 * 2 ",e.jsx("sup",{children:"0"})," = 6"]}),e.jsx("p",{children:"Now, without using a negative sign, how can we turn this into a negative value?"}),e.jsx("p",{children:"Turn and talk with the person next to you. Think of a way we could turn this into a negative number."}),e.jsx("p",{children:"Hint: it doesn't have to evaluate to 6 in decimal, it could give us -2."})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Negative binary?"}),e.jsxs("div",{className:"text-[16pt]",children:[e.jsxs("p",{children:["110 = 1 * 2 ",e.jsx("sup",{className:"leading-8",children:"2"})," + 1 * 2 ",e.jsx("sup",{children:"1"})," + 0 * 2 ",e.jsx("sup",{children:"0"})," = 6"]}),e.jsx("p",{children:"The way Java does it uses the first bit in the binary string as an indicator of positive or negative."}),e.jsx("p",{children:"If the first bit is a 1, it means the value is a negative number. If the bit is a 0, it means the value is a positive number."}),e.jsxs("p",{children:["So, actually, the way Java works with binary, 110 doesn't give us 6, it actually gives us -2. This is because the leading 1 denotes a negative number. We then take the value after, being 10, or 1 * 2 ",e.jsx("sup",{className:"leading-8",children:"1"})," + 0 * 2 ",e.jsx("sup",{children:"0"})," = 2. We can then add the negative back, so we get -2."]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Two's Complement"}),e.jsxs("div",{className:"text-[16pt]",children:[e.jsx("p",{children:"So why is it called a two's complement?"}),e.jsx("p",{children:"If we invert each binary bit and add 1 to the binary, we would get the negative complement."}),e.jsx("p",{children:"Take 0110 being decimal 6. To get the negative equivalent, we would flip each binary value to get 1001, then add 1 to it, giving us 1010."}),e.jsx("p",{children:"When we evaluate it, the leading 1 serves as the negative indicator, but it's included in the calculation."}),e.jsxs("p",{children:["So we get ",e.jsxs("code",{children:["-(1 * 2",e.jsx("sup",{className:"leading-8",children:"3"}),") + 0 * 2",e.jsx("sup",{children:"2"})," + 1 * 2",e.jsx("sup",{children:"1"})," + 0 * 2",e.jsx("sup",{children:"0"})," = -6"]})]})]})]}),e.jsx("section",{children:e.jsxs("div",{className:"text-[16pt]",children:[e.jsx("p",{children:"So what is the largest binary value with this system?"}),e.jsxs("p",{children:["Well that depends on the size of the type. For a byte, we would have 1000 0000. ",e.jsx("br",{}),"This gives us ",e.jsx("br",{}),e.jsxs("code",{children:["-(1 * 2",e.jsx("sup",{className:"leading-8",children:"7"}),") + 0 * 2",e.jsx("sup",{children:"6"})," + 0 * 2",e.jsx("sup",{children:"5"})," + 0 * 2",e.jsx("sup",{children:"4"})," + 0 * 2",e.jsx("sup",{children:"3"})," + 0 * 2",e.jsx("sup",{children:"2"})," + 0 * 2",e.jsx("sup",{children:"1"}),"+ 0 * 2",e.jsx("sup",{children:"0"})," = -128 "]})]}),e.jsx("p",{children:"this means the biggest positive value is 127, as we would have 0111 1111."}),e.jsx("p",{children:"So what about 1111 1111?"})]})}),e.jsx("section",{children:e.jsxs("div",{className:"text-[16pt]",children:[e.jsx("p",{children:"So what is the largest binary value with this system?"}),e.jsxs("p",{children:["Well that depends on the size of the type. For a byte, we would have 1000 0000. ",e.jsx("br",{}),"This gives us ",e.jsx("br",{}),e.jsxs("code",{children:["-(1 * 2",e.jsx("sup",{className:"leading-8",children:"7"}),") + 0 * 2",e.jsx("sup",{children:"6"})," + 0 * 2",e.jsx("sup",{children:"5"})," + 0 * 2",e.jsx("sup",{children:"4"})," + 0 * 2",e.jsx("sup",{children:"3"})," + 0 * 2",e.jsx("sup",{children:"2"})," + 0 * 2",e.jsx("sup",{children:"1"}),"+ 0 * 2",e.jsx("sup",{children:"0"})," = -128 "]})]}),e.jsx("p",{children:"this means the biggest positive value is 127, as we would have 0111 1111."}),e.jsx("p",{children:"So what about 1111 1111?"}),e.jsx("p",{children:"Well, that gives us -1. Why?"})]})}),e.jsx("section",{children:e.jsxs("p",{className:"text-[16pt]",children:[e.jsx("span",{className:"text-usf-yellow",children:"Fun fact: "}),"Did anyone play the game Civilizations?"]})}),e.jsxs("section",{children:[e.jsxs("p",{className:"text-[16pt]",children:[e.jsx("span",{className:"text-usf-yellow",children:"Fun fact:"})," Did anyone play the game Civilizations?"]}),e.jsx("p",{className:"text-[16pt]",children:"This signed value is why Gandhi in the game is so ruthless. In a signed value, when you go from 0000 0000 and subtract 1 to get -1, you would be at 1111 1111. However, if it's unsigned, meaning the leading bit doesn't denote a signed value, we would instead get 256, which is a lot larger than -1."})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Back to data types"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"short"}),e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"Our next type, in no particular order, is a short."}),e.jsxs("p",{children:["This is a 16-bit signed two's complement integer storing values from -32768 to 32767 (-2",e.jsx("sup",{className:"leading-8",children:"16"})," to 2",e.jsx("sup",{children:"16"}),"-1)"]})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"short age = 25;"})}),e.jsx("p",{children:e.jsx("code",{children:"short q = -10382;"})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"int"}),e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"Our next type, in no particular order, is an int."}),e.jsxs("p",{children:["This is a 32-bit signed two's complement integer storing values from -2,147,483,648 to 2,147,483,647 (-2",e.jsx("sup",{className:"leading-8",children:"31"})," to 2",e.jsx("sup",{children:"31"}),"-1)"]})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"int age = 32;"})}),e.jsx("p",{children:e.jsx("code",{children:"int x = -38192371;"})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"long"}),e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"Our next type, in no particular order, is a long."}),e.jsxs("p",{children:["This is a 64-bit signed two's complement integer storing values from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 (-2",e.jsx("sup",{className:"leading-8",children:"63"})," to 2",e.jsx("sup",{children:"63"}),"-1)"]}),e.jsx("p",{children:'You may have to add an "L" at the end of the number to denote to Java that the number is a long and not an integer.'})]}),e.jsx(s,{children:e.jsx("p",{children:e.jsx("code",{children:"long currentTime = 1756082145L;"})})})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"float"}),e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"Next up, we have a float."}),e.jsx("p",{children:"A float is a 32-bit floating point data type. It's a less precise floating point value due to how it is represented in its binary form."}),e.jsx("p",{children:"It is good if we need smaller decimal values, slightly less precision, and to compute values faster. It has a smaller memory footprint."})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"float a = 3.141f;"})}),e.jsx("p",{children:'//Float values must end with an "f" to denote it is a float and not a double.'})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"double"}),e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"Next up, we have a double."}),e.jsx("p",{children:"A double is a 64-bit floating point data type. It's a more precise floating point value, due to having more binary bits to use."}),e.jsx("p",{children:"It's also the default type for decimals in Java."}),e.jsx("p",{children:"Due to the higher bit usage, it uses more memory, but that means it's more precise."})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"double a = 3.141;"})}),e.jsx("p",{children:'//Note: Does not require a "d" after, unlike a float that requires an "f"'})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"boolean"}),e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"Now, this is the smallest type, a boolean."}),e.jsxs("p",{children:["This represents the value of ",e.jsx("code",{children:"true"})," and ",e.jsx("code",{children:"false"}),". Unlike Python, the literals of true and false are lowercase."]}),e.jsx("p",{children:"It also represents a single bit of information as it doesn't have to occupy any additional space."})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"boolean isStudent = true;"})}),e.jsx("p",{children:e.jsx("code",{children:"boolean hasGraduated = false;"})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"char"}),e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"The last type for our primitive types is a char."}),e.jsx("p",{children:"A char contains a single 16-bit character. This is a single character and requires the use of single quotes surrounded the character."})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"char playAgain = 'n';"})}),e.jsx("p",{children:e.jsx("code",{children:"char keepGoing = 'y';"})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Naming Conventions"}),e.jsx("p",{children:"A quick note about Java's Naming Conventions!"})]}),e.jsxs("section",{children:[e.jsx("p",{children:"In Java, we use Camel Casing for variables and functions (methods)."}),e.jsx("p",{children:"Classes, which we'll touch upon later in the semester, use Pascal Casing."}),e.jsx("p",{children:"Constants and enums are all in Capital/Uppercase Letters."}),e.jsxs("p",{children:["First character must be a letter, numbers can follow after. Underscores are okay, but not recommended due to naming conventions.",e.jsx("sup",{className:"leading-8",children:"*"})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Camel Casing"}),e.jsx("p",{children:"First letter of each word after the first word is capitalized."}),e.jsx("p",{children:e.jsx("code",{children:"aReallyLongVariableName"})}),e.jsx("p",{children:"No spaces since Java sees a space as a separator, not a part of the variable."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Pascal Casing"}),e.jsx("p",{children:"First letter of each word is capitalized, including the first character of the firstWord."}),e.jsx("p",{children:e.jsx("code",{children:"AReallyLongClassName"})}),e.jsx("p",{children:"Again, no spaces due to how Java reads spaces as separators of code."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Upper Case"}),e.jsx("p",{children:"This one is pretty self explanatory"}),e.jsx("p",{children:e.jsx("code",{children:"ACONSTANTVALUE"})}),e.jsx("p",{children:"This one can also have underscores to make it easier to read."}),e.jsx("p",{children:e.jsx("code",{children:"A_CONSTANT_VALUE"})})]}),e.jsxs("section",{children:[e.jsx("p",{children:"These naming conventions are there to help us create code that follows a standard convention. Please stick to these conventions. They are ways that allow us to create names for variables, functions (methods), classes (later), and constants with multiple words, while maintaining a degree of readability."}),e.jsx("p",{children:"We can't have spaces in these names, so these help us identify different words."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Back to data types"}),e.jsx("p",{children:"Sorta..."})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Did we miss one?"})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"What about Strings?"})}),e.jsxs("section",{children:[e.jsx("p",{children:`In Java, a String isn't a "primitive" data type.`}),e.jsx("p",{children:"This is because there are more things we can do with strings."}),e.jsx("p",{children:"We will look and dive into Strings later in the semester, but here's the basic gist of them."}),e.jsxs("p",{children:["A String is a data type. However, it's what we call a ",e.jsx("strong",{children:"Object Data Type"})]})]}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"To use a String, simply surround the text with double quotes and define the type as a String."}),e.jsx("p",{children:"String can contain any character, as long as they are enclosed in the double quotes."})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:'String name = "Edward";'})}),e.jsx("p",{children:e.jsx("code",{children:'String courseName = "Foundations of Program Design"'})}),e.jsx("p",{children:e.jsx("code",{children:'String course = "CS111 Foundations of Program Design"'})})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Output"})}),e.jsxs("section",{children:[e.jsx("p",{children:"Last main point for today's lecture."}),e.jsxs("p",{children:["We can output all of these variables and values using our trust ",e.jsx("code",{children:'"System.out.println()"'})," that we saw last class."]})]}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"With println, we can pass in variables or values to print out. Unlike the Python print, we cannot pass in a comma to separate values. Instead, we use the + operator to concatenate/combine values."}),e.jsx("p",{children:"When a string is present, the values will be concatenated."})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"int age = 25;"})}),e.jsx("p",{children:e.jsx("code",{children:'System.out.println("Age:" + age);'})}),e.jsx("p",{children:'//This works, outputting "Age: 25"'})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(s,{children:e.jsx("p",{children:"When we run the code to the right, we don't get any errors as it can concatenate (add) the values together, despite age being a number."})}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"int age = 25;"})}),e.jsx("p",{children:e.jsx("code",{children:'System.out.println("Age:" + age);'})}),e.jsx("p",{children:'//This works, outputting "Age: 25"'})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(s,{children:e.jsx("p",{children:"A downside to this is that once it begins concatenating, it will naturally concatenate, unless parentheses are added to ensure we stop concatenating."})}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:'System.out.println("Age:" + 25 + 2);'})}),e.jsx("p",{children:'//Above produces: "Age: 252"'}),e.jsx("p",{children:"//If we want to add 2, we would have to do the following:"}),e.jsx("p",{children:e.jsx("code",{children:'System.out.println("Age:"+(25+2));'})}),e.jsx("p",{children:'//This produces: "Age: 27" as it does the arithmetic first.'})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(s,{children:[e.jsxs("p",{children:["If we don't want to print the new line character after, we can use ",e.jsx("code",{children:"System.out.print();"})]}),e.jsx("p",{children:"This is helpful when we want to print different values on the same line and not use a single print statement."}),e.jsx("p",{children:"More useful when we touch upon loops and printing out patterns of text."})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:'System.out.print("Hello World");'})}),e.jsx("p",{children:"//This won't print a new line after"}),e.jsx("br",{}),e.jsx("p",{children:e.jsx("code",{children:'System.out.print("Welcome ");'})}),e.jsx("p",{children:e.jsx("code",{children:"System.out.print(name);"})}),e.jsx("p",{children:e.jsx("code",{children:'System.out.print("!");'})})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Lab 1: Printing Data"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Lab 1: Printing Data"}),e.jsx("p",{children:"For the remainder of class, we will work on Lab 1. This is a simple exercise on using variables and print statements."}),e.jsx("p",{children:"When you finish it, please submit it by pushing your code to GitHub and submitting the link to Canvas."})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"No class on Monday; Labor Day."})})]})]}),m=a(o);export{m as default};
