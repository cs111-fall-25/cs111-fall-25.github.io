import{w as l,q as e}from"./index-CLLJqTva.js";import"./index-BMu1d4kC.js";import{S as a,a as h}from"./index-CP53eZP4.js";import{R as n,H as t,a as i,I as s}from"./index-Dq_L-XFB.js";import"./index-H-X4gc9i.js";const o="/assets/oop2-CUoVWMpU.pdf",r="Day 11: OOP 2",x=["OOP Quick Review","Getters and Setters","Static Methods in Instance Methods","toString","Array of Objects","null","Project 2","Lab 6"],j=()=>e.jsxs(e.Fragment,{children:[e.jsx(a,{title:r,downloadHref:o}),e.jsxs(h,{children:[e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:r})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Agenda"}),e.jsx("ul",{className:"list-disc",children:x.map((c,d)=>e.jsx("li",{children:c},d))})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"OOP Quick Review"})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Class Structure"})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(t,{children:[e.jsx("p",{children:"A class follows the structure to the right."}),e.jsx("p",{children:"Remember, the name of the file must match the name of the class."}),e.jsx("p",{children:e.jsx("code",{children:"ClassName.java"})})]}),e.jsxs(i,{children:[e.jsx(s,{children:e.jsx("span",{className:"text-gray-700 dark:text-gray-300",children:"public class ClassName {"})}),e.jsx(s,{space:1,children:e.jsx("span",{className:"text-cyan-700 dark:text-cyan-300",children:"// field variables/members"})}),e.jsxs("div",{className:"text-usf-yellow",children:[e.jsx(s,{space:1,children:"public ClassName(params) {"}),e.jsx(s,{space:2,children:"// Constructor Code"}),e.jsx(s,{space:1,children:"}"})]}),e.jsx(s,{space:1,children:e.jsx("span",{className:"text-red-700 dark:text-red-300",children:"// Methods"})}),e.jsx(s,{children:e.jsx("span",{className:"text-gray-700 dark:text-gray-300",children:"}"})})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs("div",{className:"font-mono text-left text-[15pt] w-3/4",children:[e.jsx(s,{children:e.jsx("span",{className:"text-gray-700 dark:text-gray-300",children:"public class Stationary {"})}),e.jsxs("div",{className:"text-cyan-700 dark:text-cyan-300",children:[e.jsx(s,{space:1,children:"private String name;"}),e.jsx(s,{space:1,children:"private String description;"})]}),e.jsxs("div",{className:"text-usf-yellow",children:[e.jsx(s,{space:1,children:"public Stationary(String name, String description) {"}),e.jsx(s,{space:2,children:"this.name = name;"}),e.jsx(s,{space:2,children:"this.description = description;"}),e.jsx(s,{space:1,children:"}"})]}),e.jsxs("div",{className:"text-red-700 dark:text-red-300",children:[e.jsx(s,{space:1,children:"public String getName() {"}),e.jsx(s,{space:2,children:"return this.name;"}),e.jsx(s,{space:1,children:"}"})]}),e.jsx(s,{children:e.jsx("span",{className:"text-gray-700 dark:text-gray-300",children:"}"})})]}),e.jsxs("div",{className:"text-[15pt] text-left font-mono w-1/4",children:[e.jsx("p",{className:"text-gray-700 dark:text-gray-300",children:"Class Name"}),e.jsx("p",{className:"text-cyan-700 dark:text-cyan-300",children:"Field Variables"}),e.jsx("p",{className:"text-usf-yellow",children:"Constructor"}),e.jsx("p",{className:"text-red-700 dark:text-red-300",children:"Methods"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Getters and Setters"})}),e.jsx("section",{children:e.jsx("p",{children:"In order to access and modify private variables in a class, we need to have public methods to get and set values. These are called getters and setters."})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Getters"}),e.jsxs(n,{children:[e.jsx(t,{children:e.jsx("p",{children:"This will get the value and return it. Nothing else needs to happen and it simply returns the value outward so other scopes can see the hidden, encapsulated, values."})}),e.jsxs(i,{children:[e.jsx(s,{children:"private String name;"}),e.jsx(s,{children:"public String getName() {"}),e.jsx(s,{space:1,children:"return this.name;"}),e.jsx(s,{children:"}"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Setters"}),e.jsxs(n,{children:[e.jsx(t,{children:e.jsx("p",{children:"This will set and replace the value in a field variable with a given new value. This method is often a void method as it doesn't return anything and simply updates a value."})}),e.jsxs(i,{children:[e.jsx(s,{children:"public void setName(String name) {"}),e.jsx(s,{space:1,children:"this.name = name;"}),e.jsx(s,{children:"}"})]})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Accessing static methods in instance methods"})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx("div",{className:"w-1/3",children:e.jsx("p",{children:"Static functions can be used to write more generic code or to write utility functions that can have specialized functionality within the class itself."})}),e.jsxs("div",{className:"w-2/3 font-mono text-[13pt]",children:[e.jsx(s,{children:"public static String getInfo(String f, String l) {"}),e.jsx(s,{space:1,children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{space:1,children:'s.append(f).append(" ").append(l);'}),e.jsx(s,{space:1,children:"return s.toString();"}),e.jsx(s,{children:"}"}),e.jsx("br",{}),e.jsx(s,{children:"public String getInfo() {"}),e.jsx(s,{space:1,children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{space:1,children:"s.append(getInfo(this.firstName, this.lastName));"}),e.jsx(s,{space:1,children:'s.append(" ").append(this.age);'}),e.jsx(s,{space:1,children:"return s.toString();"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx("div",{className:"w-1/3",children:e.jsx("p",{children:"We can call static functions in instance methods."})}),e.jsxs("div",{className:"w-2/3 font-mono text-[13pt]",children:[e.jsx(s,{children:"public static String getInfo(String f, String l) {"}),e.jsx(s,{space:1,children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{space:1,children:'s.append(f).append(" ").append(l);'}),e.jsx(s,{space:1,children:"return s.toString();"}),e.jsx(s,{children:"}"}),e.jsx("br",{}),e.jsx(s,{children:"public String getInfo() {"}),e.jsx(s,{space:1,children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{space:1,children:"s.append(getInfo(this.firstName, this.lastName));"}),e.jsx(s,{space:1,children:'s.append(" ").append(this.age);'}),e.jsx(s,{space:1,children:"return s.toString();"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"toString"})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(t,{children:[e.jsx("p",{children:"When we print out an Object itself, we often get some information printed out to the console."}),e.jsxs("p",{children:["When we print out an object, we actually call a method called ",e.jsx("code",{children:"toString()"})," behind the scenes."]})]}),e.jsxs(i,{children:[e.jsx(s,{children:'Student s = new Student("Edward", "Rees", "erees", "20250101", 25);'}),e.jsx(s,{children:"System.out.println(s);"}),e.jsx(s,{children:'// Could give us something like: "Student@2a138b55"'})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(t,{children:e.jsxs("p",{children:["This ",e.jsx("code",{children:"toString"})," default behavior returns the class name, an @ sign, and the hex string of what we call the hashcode of the object."]})}),e.jsxs(i,{children:[e.jsx(s,{children:'Student s = new Student("Edward", "Rees", "erees", "20250101", 25);'}),e.jsx(s,{children:"System.out.println(s);"}),e.jsx(s,{children:'// Could give us something like: "Student@2a138b55"'})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(t,{children:[e.jsx("p",{children:"This Hex String is a hexadecimal (base 16) version of a number."}),e.jsx("p",{children:"A hashcode is an identifier for an object that allows for object comparison and equality. This implementation depends on the JVM, but often is the memory address for the object converted into an integer."})]}),e.jsxs(i,{children:[e.jsx(s,{children:'Student s = new Student("Edward", "Rees", "erees", "20250101", 25);'}),e.jsx(s,{children:"System.out.println(s);"}),e.jsx(s,{children:'// Could give us something like: "Student@2a138b55"'})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(t,{children:e.jsxs("p",{children:["While the default behavior is there, we can actually override the ",e.jsx("code",{children:"toString"})," method, to provide more information about the object itself."]})}),e.jsxs(i,{children:[e.jsx(s,{children:'Student s = new Student("Edward", "Rees", "erees", "20250101", 25);'}),e.jsx(s,{children:"System.out.println(s);"}),e.jsx(s,{children:"// After overriding toString, we could get something like:"}),e.jsx(s,{children:'// "[erees/20250101] Edward Rees: 25"'})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(t,{children:e.jsx("p",{children:"What does this overriding look like?"})}),e.jsxs("div",{className:"font-mono w-1/2 text-[14pt]",children:[e.jsx(s,{children:"@Override"}),e.jsx(s,{children:"public String toString() {"}),e.jsx(s,{space:1,children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{space:1,children:'s.append("[");'}),e.jsx(s,{space:1,children:"s.append(this.username);"}),e.jsx(s,{space:1,children:'s.append("/");'}),e.jsx(s,{space:1,children:"s.append(this.id);"}),e.jsx(s,{space:1,children:'s.append("] ");'}),e.jsx(s,{space:1,children:"s.append(this.firstName);"}),e.jsx(s,{space:1,children:'s.append(" ");'}),e.jsx(s,{space:1,children:"s.append(this.lastName);"}),e.jsx(s,{space:1,children:'s.append(": ");'}),e.jsx(s,{space:1,children:"s.append(this.age);"}),e.jsx(s,{space:1,children:"return s.toString();"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(t,{children:e.jsxs("p",{children:["When we add the ",e.jsx("strong",{children:"@Override"})," annotation above the method, the JVM sees that we are overriding the base implementation and uses our version instead."]})}),e.jsxs("div",{className:"font-mono w-1/2 text-[14pt]",children:[e.jsx(s,{children:"@Override"}),e.jsx(s,{children:"public String toString() {"}),e.jsx(s,{space:1,children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{space:1,children:'s.append("[");'}),e.jsx(s,{space:1,children:"s.append(this.username);"}),e.jsx(s,{space:1,children:'s.append("/");'}),e.jsx(s,{space:1,children:"s.append(this.id);"}),e.jsx(s,{space:1,children:'s.append("] ");'}),e.jsx(s,{space:1,children:"s.append(this.firstName);"}),e.jsx(s,{space:1,children:'s.append(" ");'}),e.jsx(s,{space:1,children:"s.append(this.lastName);"}),e.jsx(s,{space:1,children:'s.append(": ");'}),e.jsx(s,{space:1,children:"s.append(this.age);"}),e.jsx(s,{space:1,children:"return s.toString();"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(t,{children:[e.jsx("p",{children:"This is important as we can then simply print out the object variable itself!"}),e.jsxs("p",{children:["Since this method return a string, we not have a String representation of the object. Anytime we want to print out the object information, we can call this ",e.jsx("code",{children:"toString()"})," method itself."]})]}),e.jsxs("div",{className:"font-mono w-1/2 text-[14pt]",children:[e.jsx(s,{children:"@Override"}),e.jsx(s,{children:"public String toString() {"}),e.jsx(s,{space:1,children:"StringBuilder s = new StringBuilder();"}),e.jsx(s,{space:1,children:'s.append("[");'}),e.jsx(s,{space:1,children:"s.append(this.username);"}),e.jsx(s,{space:1,children:'s.append("/");'}),e.jsx(s,{space:1,children:"s.append(this.id);"}),e.jsx(s,{space:1,children:'s.append("] ");'}),e.jsx(s,{space:1,children:"s.append(this.firstName);"}),e.jsx(s,{space:1,children:'s.append(" ");'}),e.jsx(s,{space:1,children:"s.append(this.lastName);"}),e.jsx(s,{space:1,children:'s.append(": ");'}),e.jsx(s,{space:1,children:"s.append(this.age);"}),e.jsx(s,{space:1,children:"return s.toString();"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(t,{children:e.jsxs("p",{children:["With the ",e.jsx("code",{children:"toString"})," method overridden, we can also do:"]})}),e.jsxs(i,{children:[e.jsx(s,{children:'Student s = new Student("Edward", "Rees", "erees", "20250101", 25);'}),e.jsx(s,{children:"String sInfo = s.toString();"}),e.jsx(s,{children:"System.out.println(sInfo);"}),e.jsx(s,{children:"// or even simpler:"}),e.jsx(s,{children:"System.out.println(s);"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Array of Objects"})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(t,{children:[e.jsx("p",{children:"Since objects are another data type, we can create an array of objects."}),e.jsx("p",{children:"The logic is the same as an array of any other data type, but instead of primitive types, we have objects.This means we can use the object methods too."})]}),e.jsx(i,{children:e.jsx(s,{children:"Student[] students = new Student[10];"})})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(t,{children:e.jsx("p",{children:"However, we must set values in the array to new instances of the data type."})}),e.jsxs(i,{children:[e.jsx(s,{children:"Student[] students = new Student[5];"}),e.jsx(s,{children:"students[0] = new Student( ... );"}),e.jsx(s,{children:"students[1] = new Student( ... );"}),e.jsx(s,{children:"..."}),e.jsx(s,{children:"for(Student s : students) {"}),e.jsx(s,{space:1,children:"System.out.println(s);"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(t,{children:e.jsx("p",{children:"Alternatively, if we know the student objects already, we could also set them initially:"})}),e.jsxs(i,{children:[e.jsx(s,{children:"Student[] students = { new Student(...), new Student(...), ... new Student(...) }"}),e.jsx(s,{children:"for(Student s : students) {"}),e.jsx(s,{space:1,children:"System.out.println(s);"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(t,{children:e.jsx("p",{children:"If we wanted to print out only the names of the students, we could also do this:"})}),e.jsxs(i,{children:[e.jsx(s,{children:"Student[] students = { new Student(...), new Student(...), ... new Student(...) }"}),e.jsx(s,{children:"for(Student s : students) {"}),e.jsx(s,{space:1,children:"System.out.println(s.getName());"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"null"})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(t,{children:[e.jsxs("p",{children:["The default value for a primitive type is ",e.jsx("code",{children:"0"}),", but for an object, it's ",e.jsx("code",{children:"null"}),"."]}),e.jsxs("p",{children:[e.jsx("code",{children:"null"})," is another primitive value, like how ",e.jsx("code",{children:"None"})," is a value in Python."]}),e.jsxs("p",{children:[e.jsx("code",{children:"null"})," is used when an object doesn't exist or a value is not found."]})]}),e.jsxs(i,{children:[e.jsx(s,{children:"if (obj == null) {"}),e.jsx(s,{space:1,children:"return false;"}),e.jsx(s,{children:"}"}),e.jsx(s,{children:"return true;"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Project 2"})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Reminder of Spec Grading"})}),e.jsxs("section",{children:[e.jsxs("p",{children:["Do the work for a C ",e.jsx("strong",{children:"first"}),", then implement the features for a B ",e.jsx("strong",{children:"next"}),", then work on the features for an A ",e.jsx("strong",{children:"last"}),". If you tackle the A features but your C and B features aren't working, you won't get an A."]}),e.jsx("p",{children:"Work incrementally, not tackling the A+ features when your base functionality doesn't work. Taking that approach will lead to less of the project functionally complete at the end, leading you towards getting a D instead. I do'nt want that when I know you're all capable of doing well."}),e.jsx("p",{children:"Go slow and incrementally!"})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Lab 6"})})]})]}),w=l(j);export{w as default};
