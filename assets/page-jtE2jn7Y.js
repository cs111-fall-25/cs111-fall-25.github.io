import{w as c,q as e}from"./index-CLLJqTva.js";import"./index-BMu1d4kC.js";import{S as h,a as d}from"./index-CP53eZP4.js";import{R as i,H as t,a as n,I as s}from"./index-Dq_L-XFB.js";import"./index-H-X4gc9i.js";const o="/assets/2d-arrays-ByB3Ilh2.pdf",x="/assets/Stack-Heap-Diagram-qaVqS_vE.png",r="Day 8: 2D Arrays",j=["Quiz 3","Stack v Heap Review","Array Review","2D Arrays","In class"],p=()=>e.jsxs(e.Fragment,{children:[e.jsx(h,{title:r,downloadHref:o}),e.jsxs(d,{children:[e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:r})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Agenda"}),e.jsx("ul",{className:"list-disc",children:j.map((l,a)=>e.jsx("li",{children:l},a))})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Quiz 3"})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Stack v Heap Review"})}),e.jsxs("section",{children:[e.jsx("p",{children:"I wanted to review the Stack and the Heap as I felt that could've been explained better last week."}),e.jsx("div",{className:"flex flex-row justify-center",children:e.jsx("img",{src:x,alt:"Diagram of Stack and Heap",className:"h-[50vh]"})}),e.jsx("aside",{className:"notes",children:e.jsxs("ul",{children:[e.jsx("li",{children:"Stack stores values as a LIFO structure. Primitives, local scoped variables, object pointers, and methods are pushed onto the Stack. Data stored on the Stack must have a known, fixed size."}),e.jsx("li",{children:"The Heap is less organized. When we create objects, behind the scenes, a certain amount of memory is requested from the memory allocator. The heap will allocate or provide the amount of data required to store the object. It will then send the pointer to the Stack."}),e.jsx("li",{children:"Pushing onto the stack is faster than allocating on the heap as the allocator must find the amount of space to allocate required for the object. It isn't as sequential as the stack is."}),e.jsx("li",{children:"Additionally, accessing data on the heap is generally slower than the stack as we have to follow that pointer back to the heap. This isn't too noticeable for us, but it can take longer."})]})})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Array Review"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Initializing Arrays"}),e.jsxs(i,{children:[e.jsx(t,{children:e.jsx("p",{children:"Reminder, in order to initialize an array, we must use the following syntax:"})}),e.jsxs(n,{children:[e.jsx(s,{children:"<type>[] <name> = new <type>[size];"}),e.jsx(s,{children:"<type>[] <name> = { <vals> };"}),e.jsx("p",{children:"For example"}),e.jsx(s,{children:"int[] arr = new int[10];"}),e.jsx(s,{children:"int[] arr = { 1, 2, 3, 4, 5 };"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Get/Set"}),e.jsxs(i,{children:[e.jsx(t,{children:e.jsx("p",{children:"With an array, we can only get and set values. We cannot add or remove values."})}),e.jsxs(n,{children:[e.jsx(s,{children:"int[] arr = new int[10];"}),e.jsx(s,{children:"arr[0] = 1;"}),e.jsx(s,{children:"arr[1] = 3;"}),e.jsx(s,{children:"System.out.println(arr[0]); // 1"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Length"}),e.jsxs(i,{children:[e.jsxs(t,{children:[e.jsxs("p",{children:["We can use the ",e.jsx("code",{children:".length"})," property of arrays to get their length."]}),e.jsx("p",{children:"This is useful for iterating through an array."})]}),e.jsxs(n,{children:[e.jsx(s,{children:"int[] arr = new int[10];"}),e.jsx(s,{children:"arr.length; // gives 10"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Iteration"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx(s,{children:"int[] arr = new int[10];"}),e.jsx(s,{children:"for(int i = 0; i < arr.length; i++) {"}),e.jsx(s,{space:1,children:"System.out.println(arr[i]);"}),e.jsx(s,{children:"}"})]}),e.jsxs(n,{children:[e.jsx(s,{children:"int[] arr = new int[10];"}),e.jsx(s,{children:"for(int val : arr) {"}),e.jsx(s,{space:1,children:"System.out.println(val);"}),e.jsx(s,{children:"}"})]})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"2D Array"})}),e.jsx("section",{children:"What if we want an array with a row and a column?"}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(t,{children:[e.jsx("p",{children:"We can use a 2D Array!"}),e.jsx("p",{children:"We set the number of rows and number of columns."}),e.jsx("p",{children:"In the case to the right, there are 5 rows and 5 columns."})]}),e.jsxs(n,{children:[e.jsx(s,{children:"int[][] nums = new int[5][5];"}),e.jsx(s,{children:"nums[0][0] = 1;"}),e.jsx(s,{children:"System.out.println(nums[0][0]); // 1"})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(t,{children:e.jsx("p",{children:"We can still only get and set values though!"})}),e.jsxs(n,{children:[e.jsx(s,{children:"int[][] nums = new int[5][5];"}),e.jsx(s,{children:"nums[0][0] = 1;"}),e.jsx(s,{children:"System.out.println(nums[0][0]); // 1"})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(t,{children:e.jsx("p",{children:"What about iterating through it?"})}),e.jsxs(n,{children:[e.jsx(s,{children:"int[][] nums = new int[5][5];"}),e.jsx(s,{children:"for(int i = 0; i < nums.length; i++) {"}),e.jsx(s,{space:1,children:"for(int j = 0; j < nums[i].length; j++) {"}),e.jsx(s,{space:2,children:'System.out.print(nums[i][j] + " ");'}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{space:1,children:"System.out.println();"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(t,{children:e.jsx("p",{children:"Or alternatively:"})}),e.jsxs(n,{children:[e.jsx(s,{children:"int[][] nums = new int[5][5];"}),e.jsx(s,{children:"for(int[] rows : nums) {"}),e.jsx(s,{space:1,children:"for(int col : rows) {"}),e.jsx(s,{space:2,children:'System.out.print(col + " ");'}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{space:1,children:"System.out.println();"}),e.jsx(s,{children:"}"})]})]})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Initializing with preset values"}),e.jsxs(i,{children:[e.jsx(t,{children:e.jsx("p",{children:"We can also initialize our 2D Array with pre-set values using the notation to the right."})}),e.jsx(n,{children:e.jsx(s,{children:"int[][] nums = { { 1, 2, 3 }, { 4, 5, 6 } };"})})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"2D Array Practice"})})]})]}),g=c(p);export{g as default};
