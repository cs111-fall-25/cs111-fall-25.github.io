import{w as p,q as e}from"./index-CLLJqTva.js";import{T as o,n as a,o as c,p as d,q as x,r as n}from"./index-BMu1d4kC.js";import{S as u,a as m}from"./index-CP53eZP4.js";import{R as l,H as i,a as r,I as s}from"./index-Dq_L-XFB.js";import"./index-H-X4gc9i.js";const f="/assets/conditionals-BPsStj5I.pdf",j="Day 4: Conditionals",w=["Booleans","Conditional Chaining","Conditional Statements","While Loops","Primitive Type Casting","Random Numbers","Lab 2: Number Guessing Game"],y=()=>e.jsxs(e.Fragment,{children:[e.jsx(u,{title:j,downloadHref:f}),e.jsxs(m,{children:[e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:j})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Agenda"}),e.jsx("ul",{className:"list-disc",children:w.map((t,h)=>e.jsx("li",{children:t},h))})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Booleans"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Review"}),e.jsxs(l,{children:[e.jsxs(i,{children:[e.jsx("p",{children:"Explicit/Literals"}),e.jsx("p",{children:e.jsx("code",{children:"true"})}),e.jsx("p",{children:e.jsx("code",{children:"false"})})]}),e.jsxs(i,{children:[e.jsx("p",{children:"Implicit/Evaluated"}),e.jsx("p",{children:e.jsx("code",{children:"3 > 2"})}),e.jsx("p",{children:e.jsx("code",{children:"2 < 10"})}),e.jsx("p",{children:e.jsx("code",{children:"3 == 3"})}),e.jsx("p",{children:e.jsx("code",{children:"4 != 8"})}),e.jsx("p",{children:e.jsx("code",{children:"5 >= 1"})}),e.jsx("p",{children:e.jsx("code",{children:"9 <= 9"})})]})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Conditional Chaining"})}),e.jsx("section",{children:e.jsxs("p",{children:["Remember that we can always check for multiple conditions at once using the ",e.jsx("strong",{children:"and/or"})," boolean keywords and can check for negation with the ",e.jsx("strong",{children:"not"})," keywords."]})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"not"}),e.jsxs(l,{children:[e.jsx(i,{children:e.jsxs("p",{children:["Unlike Python, ",e.jsx("strong",{children:"not"}),' is not the "keyword" to use here. In Java, we use ',e.jsx("code",{children:"!"})," instead to denote ",e.jsx("strong",{children:"not"})]})}),e.jsx(i,{children:e.jsx("p",{children:e.jsx("code",{children:"!true -> false"})})})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"not truth table"}),e.jsxs(o,{className:"text-md w-3/4",children:[e.jsx(a,{children:e.jsxs(c,{children:[e.jsx(d,{children:"x"}),e.jsx(d,{children:"!x"})]})}),e.jsxs(x,{children:[e.jsxs(c,{children:[e.jsx(n,{children:e.jsx("code",{children:"true"})}),e.jsx(n,{children:e.jsx("code",{children:"false"})})]}),e.jsxs(c,{children:[e.jsx(n,{children:e.jsx("code",{children:"false"})}),e.jsx(n,{children:e.jsx("code",{children:"true"})})]})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"and"}),e.jsxs(l,{children:[e.jsx(i,{children:e.jsxs("p",{children:["Unlike Python, ",e.jsx("strong",{children:"and"}),' is not the "keyword" to use here. In Java, we use ',e.jsx("code",{children:"&&"})," instead to denote ",e.jsx("strong",{children:"and"})]})}),e.jsx(i,{children:e.jsx("p",{children:e.jsx("code",{children:"true && false -> false"})})})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"and truth table"}),e.jsxs(o,{className:"text-md w-3/4",children:[e.jsx(a,{children:e.jsxs(c,{children:[e.jsx(d,{children:"x"}),e.jsx(d,{children:"y"}),e.jsx(d,{children:"x && y"})]})}),e.jsxs(x,{children:[e.jsxs(c,{children:[e.jsx(n,{children:e.jsx("code",{children:"true"})}),e.jsx(n,{children:e.jsx("code",{children:"true"})}),e.jsx(n,{children:e.jsx("code",{children:"true"})})]}),e.jsxs(c,{children:[e.jsx(n,{children:e.jsx("code",{children:"true"})}),e.jsx(n,{children:e.jsx("code",{children:"false"})}),e.jsx(n,{children:e.jsx("code",{children:"false"})})]}),e.jsxs(c,{children:[e.jsx(n,{children:e.jsx("code",{children:"false"})}),e.jsx(n,{children:e.jsx("code",{children:"true"})}),e.jsx(n,{children:e.jsx("code",{children:"false"})})]}),e.jsxs(c,{children:[e.jsx(n,{children:e.jsx("code",{children:"false"})}),e.jsx(n,{children:e.jsx("code",{children:"false"})}),e.jsx(n,{children:e.jsx("code",{children:"false"})})]})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"or"}),e.jsxs(l,{children:[e.jsx(i,{children:e.jsxs("p",{children:["Unlike Python, ",e.jsx("strong",{children:"or"}),' is not the "keyword" to use here. In Java, we use ',e.jsx("code",{children:"||"})," instead to denote ",e.jsx("strong",{children:"or"})]})}),e.jsx(i,{children:e.jsx("p",{children:e.jsx("code",{children:"true || false -> true"})})})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"or truth table"}),e.jsxs(o,{className:"text-md w-3/4",children:[e.jsx(a,{children:e.jsxs(c,{children:[e.jsx(d,{children:"x"}),e.jsx(d,{children:"y"}),e.jsx(d,{children:"x || y"})]})}),e.jsxs(x,{children:[e.jsxs(c,{children:[e.jsx(n,{children:e.jsx("code",{children:"true"})}),e.jsx(n,{children:e.jsx("code",{children:"true"})}),e.jsx(n,{children:e.jsx("code",{children:"true"})})]}),e.jsxs(c,{children:[e.jsx(n,{children:e.jsx("code",{children:"true"})}),e.jsx(n,{children:e.jsx("code",{children:"false"})}),e.jsx(n,{children:e.jsx("code",{children:"true"})})]}),e.jsxs(c,{children:[e.jsx(n,{children:e.jsx("code",{children:"false"})}),e.jsx(n,{children:e.jsx("code",{children:"true"})}),e.jsx(n,{children:e.jsx("code",{children:"true"})})]}),e.jsxs(c,{children:[e.jsx(n,{children:e.jsx("code",{children:"false"})}),e.jsx(n,{children:e.jsx("code",{children:"false"})}),e.jsx(n,{children:e.jsx("code",{children:"false"})})]})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Boolean Algebra"}),e.jsxs("div",{className:"text-[16pt]",children:[e.jsx("p",{children:"Order of operations"}),e.jsx("ul",{className:"list-disc pl-5",children:["Left to Right","Parentheses get evaluated first","Not evaluated next","And evaluated after","Or evaluated last","Parentheses do change this order, just like they do with regular arithmetic operations"].map((t,h)=>e.jsx("li",{children:t},h))}),e.jsx("p",{children:e.jsx("code",{children:"true || (true && false) = true || false = true"})})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Conditional Statements"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"if"}),e.jsxs(l,{children:[e.jsxs(i,{children:[e.jsxs("p",{children:["Same as in Python, we have the ",e.jsx("strong",{children:"if"})," keyword."]}),e.jsx("p",{children:"However, unlike Python, we must wrap the condition in parentheses and have curly brackets after."})]}),e.jsxs(i,{children:[e.jsx("p",{children:e.jsx("code",{children:"if (boolean condition){"})}),e.jsx("p",{className:"pl-5",children:e.jsx("code",{children:"// code if the condition is true"})}),e.jsx("p",{children:e.jsx("code",{children:"}"})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"else"}),e.jsxs(l,{children:[e.jsxs(i,{children:[e.jsxs("p",{children:["If the condition in the ",e.jsx("strong",{children:"if"})," clause is incorrect, or false, and we want some other code to execute, we can use an ",e.jsx("strong",{children:"else"})," statement."]}),e.jsx("p",{children:"This is the same as in Python, where we don't give the else a condition. We add curly braces after and place our code between the braces."})]}),e.jsxs(r,{children:[e.jsx(s,{space:0,children:"if (boolean condition) {"}),e.jsx(s,{space:1,children:"// code if the condition is true"}),e.jsx(s,{space:0,children:"}"}),e.jsx(s,{space:0,children:"else {"}),e.jsx(s,{space:1,children:"// code if the condition is false"}),e.jsx(s,{space:0,children:"}"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"else if"}),e.jsxs(l,{children:[e.jsxs(i,{children:[e.jsx("p",{children:"If we have multiple conditions to check for, we can use an else if."}),e.jsxs("p",{children:["If the first condition is ",e.jsx("code",{children:"false"}),", but we want to check for a secondary condition, we can use an ",e.jsx("code",{children:"else if"}),"."]}),e.jsxs("p",{children:["This is better than having multiple ",e.jsx("code",{children:"if"})," statements, as we can include an ",e.jsx("code",{children:"else"})," at the end to catch all the other cases, if all cases are false."]})]}),e.jsxs(i,{children:[e.jsx("p",{children:e.jsx("code",{children:"if (condition 1){"})}),e.jsx("p",{className:"pl-5",children:e.jsx("code",{children:"// code if condition 1 is true"})}),e.jsx("p",{children:e.jsx("code",{children:"}"})}),e.jsx("p",{children:e.jsx("code",{children:"else if (condition 2){"})}),e.jsx("p",{className:"pl-5",children:e.jsx("code",{children:"// code if condition 2 is true"})}),e.jsx("p",{children:e.jsx("code",{children:"}"})}),e.jsx("p",{children:e.jsx("code",{children:"else {"})}),e.jsx("p",{className:"pl-5",children:e.jsx("code",{children:"// code if the condition 1 and 2 are false"})}),e.jsx("p",{children:e.jsx("code",{children:"}"})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"else if"}),e.jsxs(l,{children:[e.jsx(i,{children:e.jsx("p",{children:"You can have as many else if statements as you want/need."})}),e.jsxs(r,{children:[e.jsx(s,{space:0,children:"if (condition 1){"}),e.jsx(s,{space:1,children:"// code if condition 1 is true"}),e.jsx(s,{space:0,children:"} else if (condition 2){"}),e.jsx(s,{space:1,children:"// code if condition 2 is true"}),e.jsx(s,{space:0,children:"} else if (condition 3){"}),e.jsx(s,{space:1,children:"// code if condition 3 is true"}),e.jsx(s,{space:0,children:"} else {"}),e.jsx(s,{space:1,children:"// code if all conditions are false"}),e.jsx(s,{space:0,children:"}"})]})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"While Loops"})}),e.jsx("section",{children:e.jsxs(l,{children:[e.jsxs(i,{children:[e.jsxs("p",{children:["If we want to repeat code, we can use a ",e.jsx("code",{children:"while"})," loop."]}),e.jsxs("p",{children:["We can use the ",e.jsx("code",{children:"while"})," keyword, with parentheses after, with a condition that must be true for the loop to run. If the condition becomes false, the loop will naturally stop."]})]}),e.jsxs(r,{children:[e.jsx(s,{space:0,children:"while(true condition to run the loop) {"}),e.jsx(s,{space:1,children:"// looping code goes here"}),e.jsx(s,{space:0,children:"}"})]})]})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Infinite Loops"}),e.jsxs(l,{children:[e.jsxs(i,{children:[e.jsxs("p",{children:["We can create an infinite loop using ",e.jsx("code",{children:"true"})," as our condition to run the loop."]}),e.jsxs("p",{children:["This will never end unless it runs into a ",e.jsx("code",{children:"break"})]})]}),e.jsxs(r,{children:[e.jsx(s,{children:"while (true) {"}),e.jsx(s,{space:1,children:"// code"}),e.jsx(s,{children:"}"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Stopping a loop"}),e.jsxs(l,{children:[e.jsxs(i,{children:[e.jsxs("p",{children:["If we want to stop a loop in its tracks, we can use the ",e.jsx("code",{children:"break"})," keyword."]}),e.jsx("p",{children:"The example to the right will keep going until x is greater than 5."})]}),e.jsxs(r,{children:[e.jsx(s,{children:"int x = 1;"}),e.jsx(s,{children:"while (true) {"}),e.jsx(s,{space:1,children:"if (x > 5) {"}),e.jsx(s,{space:2,children:"break;"}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{space:1,children:"x += 1;"}),e.jsx(s,{children:"}"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Conditioned Loops"}),e.jsxs(l,{children:[e.jsxs(i,{children:[e.jsx("p",{children:"Normally, we will end the loop based on some condition, instead of breaking when the condition of an if-statement is met."}),e.jsx("p",{children:"The example to the right is the same while loop code as the code in the previous slide, but without an if-statement and using break."})]}),e.jsxs(r,{children:[e.jsx(s,{children:"int x = 1;"}),e.jsx(s,{children:"while(x < 5){"}),e.jsx(s,{space:1,children:"x += 1;"}),e.jsx(s,{children:"}"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"When to use either"}),e.jsxs(l,{children:[e.jsx(i,{children:e.jsx("p",{children:"Infinite loops are great when multiple possible conditions may stop the loop"})}),e.jsx(i,{children:e.jsx("p",{children:'Conditioned loops are the "normal" way to write while loops. They will end when some condition is no longer true.'})})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Primitive Type Casting"})}),e.jsxs("section",{children:[e.jsx("p",{children:"What is the term we use to describe converting between types?"}),e.jsx("p",{children:"We did this in Python when we converted a String into an integer"}),e.jsx("p",{children:"Who remembers this term?"})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Cast"})}),e.jsx("section",{children:e.jsx("p",{children:"As a review, casting is the process of converting data from one type into another type."})}),e.jsx("section",{children:e.jsxs(l,{children:[e.jsxs(i,{children:[e.jsx("p",{children:"Between primitive data types, we can cast a value into a different type if we need."}),e.jsx("p",{children:"We just need to put the type we want to cast the data into in parentheses before the value."}),e.jsx("p",{children:"The example to the right casts the double into an integer."})]}),e.jsxs(r,{children:[e.jsx(s,{children:"double d = 13.024;"}),e.jsx(s,{children:"int i = (int) d;"}),e.jsx(s,{children:"System.out.println(i + 1); // gives us 14"})]})]})}),e.jsx("section",{children:e.jsxs(l,{children:[e.jsx(i,{children:e.jsx("p",{children:"This doesn't work with strings in the same way. Instead, we have to call another function to parse the data."})}),e.jsxs(r,{children:[e.jsx(s,{children:'String s = "123";'}),e.jsx(s,{children:"int i = Integer.parseInt(s);"}),e.jsx(s,{children:"System.out.println(i + 3); // Gives 126"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Random Numbers"})}),e.jsx("section",{children:e.jsxs("p",{children:["There are multiple ways of generating a random number in Java. We'll use the ",e.jsx("code",{children:"Math.random()"})," approach."]})}),e.jsx("section",{children:e.jsxs(l,{children:[e.jsx(i,{children:e.jsxs("ul",{children:[e.jsxs("li",{children:["Using this method, we use ",e.jsx("code",{children:"Math.random()"})," to generate a random number between 0 and 1."]}),e.jsx("li",{children:"We then multiply the number by the different of a maximum and minimum value. This will shift our range from [0 to 1] to [0 to (max-min)]"}),e.jsx("li",{children:"We then add a minimum to shift our minimum value. This shifts our range to [min to max]."}),e.jsx("li",{children:"Lastly, we cast it into an integer to remove the decimal place."})]})}),e.jsx(r,{children:e.jsx(s,{children:"int num = (int) (Math.random() * (max-min) + min);"})})]})}),e.jsx("section",{children:e.jsxs(l,{children:[e.jsx(i,{children:e.jsxs("ul",{children:[e.jsx("li",{children:"In the example to the right, we would get a random number between 5 and 25, excluding 25."}),e.jsx("li",{children:"Math.random() gives us a double between 0 and 1 (exclusive of 1.)"}),e.jsx("li",{children:"Multiplying that by (25-5) or 20, shifts our range of values to 0 to 20 (exclusive of 20)."}),e.jsx("li",{children:"We then add 5 to shift the values to 5 to 25 (exclusive of 25)"}),e.jsx("li",{children:"Casting it to an integers happens at the end, removing the decimals."})]})}),e.jsx(r,{children:e.jsx(s,{children:"int num = (int) (Math.random() * (25-5)) + 5;"})})]})}),e.jsx("section",{children:e.jsxs(l,{children:[e.jsxs(i,{children:[e.jsx("p",{children:"Removing the parentheses would maintain the order of operations, as multiplication happens first, however, separating the operations leads to more readable code."}),e.jsx("p",{children:"Ensure the order or operations is correct, or you risk having the incorrect range of [0, 25) "})]}),e.jsx(r,{children:e.jsx(s,{space:0,children:"int num = (int) (Math.random() * (25-5 + 5));"})})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Lab 2: Number Guessing Game"})})]})]}),T=p(y);export{T as default};
