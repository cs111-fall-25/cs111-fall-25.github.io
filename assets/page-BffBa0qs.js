import{w as c,t as e}from"./index-CiYINecr.js";import"./index-ZQYjAMWU.js";import{S as l,a as d}from"./index-DiHAfNbc.js";import{R as n,H as s}from"./index-BkJb7WFC.js";import"./index-CFi-U94j.js";const h="/assets/scanner-BAYvayAY.pdf",r="Day 3: Scanner",x=["Quiz 1","Census Day Reminder","Lab 1 Q5 Review","Input","Scanner","Closing the Scanner","Review of Operators","In Class: Input Practice"],a=()=>e.jsxs(e.Fragment,{children:[e.jsx(l,{title:r,downloadHref:h}),e.jsxs(d,{children:[e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:r})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Agenda"}),e.jsx("ul",{className:"list-disc",children:x.map((i,t)=>e.jsx("li",{children:i},t))})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Quiz 1"})}),e.jsxs("section",{children:[e.jsx("p",{children:"You have 15 minutes to finish the Quiz. When you're done, you can bring it to me at the front or give it to your TA."}),e.jsx("p",{children:"Closed note quiz, try your best!"})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Quiz 1 Review"}),e.jsx("p",{children:"Do we have any questions to go over?"})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Friday, Sep 5"}),e.jsx("p",{children:"Last day to add/drop classes"})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Lab 1 Quick Debrief"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Q3"}),e.jsx("p",{children:"Int * String doesn't work in Java"})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Q5"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Let's do it live!"}),e.jsx("p",{children:"How does 127*3 give us 125?"})]}),e.jsxs("section",{className:"text-[16pt]",children:[e.jsx("p",{children:"127 * 3 = 381"}),e.jsx("p",{children:"381 in binary = 256 + 64 + 32 + 16 + 8 + 4 + 1"}),e.jsx("p",{children:"This is also equal to:"}),e.jsx("p",{children:e.jsxs("code",{children:["1 * 2",e.jsx("sup",{className:"leading-8",children:"8"})," + 0 * 2",e.jsx("sup",{children:"7"})," + 1 * 2",e.jsx("sup",{children:"6"})," + 1 * 2",e.jsx("sup",{children:"5"})," + 1 * 2",e.jsx("sup",{children:"4"})," + 1 * 2",e.jsx("sup",{children:"3"})," + 1 * 2",e.jsx("sup",{children:"2"})," + 0 * 2",e.jsx("sup",{children:"1"})," + 1 * 2",e.jsx("sup",{className:"leading-8",children:"0"})]})}),e.jsx("p",{children:"By removing the powers of 2 and only taking the 1s and 0s"}),e.jsx("p",{children:"we get: 101111101"}),e.jsx("p",{children:"Byte takes 8 bits, so if we only look at the last 8 bits, we get 01111101"}),e.jsx("p",{children:"01111101 is the binary for 125"})]}),e.jsx("section",{children:e.jsx("p",{children:"Test code. Don't assume"})}),e.jsx("section",{children:e.jsx("p",{children:"Variable Creation Overview"})}),e.jsxs("section",{children:[e.jsx("p",{children:e.jsx("code",{children:"{Data type} {Variable Name} = {Value};"})}),e.jsxs("p",{children:["For example: ",e.jsx("code",{children:"byte n = 100;"})]}),e.jsxs("p",{children:["If we don't have the ",e.jsx("code",{children:"n"})," part, what is the variable?"]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Variable Changing"}),e.jsxs(n,{children:[e.jsx(s,{children:e.jsxs("p",{children:[e.jsx("code",{children:"{variable} += {value}"})," may not always print something. Do not print this value out. Instead, change the variable first, then print out the value."]})}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"int x = 1;"})}),e.jsx("p",{children:e.jsx("code",{children:"x += 2;"})}),e.jsx("p",{children:e.jsx("code",{children:"System.out.println(x);"})})]})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Input"})}),e.jsx("section",{children:e.jsxs("p",{children:["In Java, taking input is more complicated than the ",e.jsx("code",{children:"input(prompt)"})," that we saw in Python."]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(s,{children:[e.jsxs("p",{children:["In order to get input, we must use the ",e.jsx("code",{children:"Scanner"})," class. This requires us to ",e.jsx("code",{children:"import"})," the Scanner class into our program."]}),e.jsx("p",{children:"At the top of your program, we will include the following code."})]}),e.jsx(s,{children:e.jsx("p",{children:e.jsx("code",{children:"import java.util.Scanner;"})})})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(s,{children:e.jsx("p",{children:"This will allow us to bring in the Scanner into our code, using Scanner to take the input from the user."})}),e.jsx(s,{children:e.jsx("p",{children:e.jsx("code",{children:"import java.util.Scanner;"})})})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"The next step is to use our Scanner in our code."}),e.jsxs("p",{children:["We will create a new Scanner ",e.jsx("strong",{children:"object"}),", which effectively creates a new instance or copy of the Scanner."]})]}),e.jsx(s,{children:e.jsx("p",{children:e.jsx("code",{children:"Scanner input = new Scanner(System.in);"})})})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(s,{children:e.jsxs("p",{children:["What is this ",e.jsx("code",{children:"new"})," part?"]})}),e.jsx(s,{children:e.jsx("p",{children:e.jsx("code",{children:"Scanner input = new Scanner(System.in);"})})})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(s,{children:e.jsxs("p",{children:[e.jsx("code",{children:"new"})," is a keyword that we use to create a new object. We will see what these objects mean later when we dive deeper into Classes and Objects."]})}),e.jsx(s,{children:e.jsx("p",{children:"For now, think of it as making a new copy or instance of the Scanner"})})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(s,{children:e.jsxs("p",{children:["But what about the ",e.jsx("code",{children:"System.in"}),"?"]})}),e.jsx(s,{children:e.jsx("p",{children:e.jsx("code",{children:"Scanner input = new Scanner(System.in);"})})})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"Scanner can take in different types of input locations."}),e.jsxs("p",{children:[e.jsx("code",{children:"System.in"})," simply tells Java to use the Standard Input from system."]}),e.jsx("p",{children:"This is the same as the user input we used in Python."})]}),e.jsx(s,{children:e.jsx("p",{children:e.jsx("code",{children:"Scanner input = new Scanner(System.in);"})})})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(s,{children:e.jsxs("p",{children:["In this case, we create the variable ",e.jsx("code",{children:"input"})," to store our scanner, allowing us to call various functions connected to the scanner through input."]})}),e.jsx(s,{children:e.jsx("p",{children:e.jsx("code",{children:"Scanner input = new Scanner(System.in);"})})})]})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Print then input"}),e.jsxs(n,{children:[e.jsxs(s,{children:[e.jsx("p",{children:"To use Scanner, we first must print out the prompt, then on the next line, we can call our input."}),e.jsx("p",{children:"The example to the right simply prints the user to enter their name. On the next line, we read what the user typed in."})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:'System.out.println("Enter your name ");'})}),e.jsx("p",{children:e.jsx("code",{children:"String name = input.nextLine();"})})]})]})]}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(s,{children:[e.jsxs("p",{children:["In the previous slide, we saw ",e.jsx("code",{children:"input.nextLine();"})]}),e.jsx("p",{children:"This will read the data input on the line after the prompt. However, there are other functions we can call from the input."})]}),e.jsx(s,{children:e.jsx("ol",{children:["nextLine","next","nextInt","nextDouble","nextLong","nextShort","nextByte","nextBoolean"].map((i,t)=>e.jsx("li",{children:e.jsxs("code",{children:[i,"()"]})},t))})})]})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"nextLine()"}),e.jsxs(n,{children:[e.jsx(s,{children:e.jsxs("p",{children:[e.jsx("code",{children:"nextLine()"})," gives us a String of what was inputted by the user on the line after the new line character."]})}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"Scanner input = new Scanner(System.in);"})}),e.jsx("p",{children:e.jsx("code",{children:'System.out.println("Enter your name: ");'})}),e.jsx("p",{children:e.jsx("code",{children:"String name = input.nextLine();"})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"next()"}),e.jsxs(n,{children:[e.jsxs(s,{children:[e.jsxs("p",{children:[e.jsx("code",{children:"next()"})," gives us a String of what was inputted by the user, following the print statement."]}),e.jsxs("p",{children:["If we want to output a prompt and take the input on the same line, this is where the regular ",e.jsx("code",{children:"System.out.print"})," comes in handy."]}),e.jsxs("p",{children:["The difference between ",e.jsx("code",{children:"next"})," and ",e.jsx("code",{children:"nextLine"})," is, ",e.jsx("code",{children:"next"})," reads up to the first space character, while ",e.jsx("code",{children:"nextLine"})," will read until the new line character. (\\n)"]}),e.jsxs("p",{children:["An important note is: We may have to scan in the new line character afterwards, so we often simply have a ",e.jsx("code",{children:"input.nextLine();"})]})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"Scanner input = new Scanner(System.in);"})}),e.jsx("p",{children:e.jsx("code",{children:'System.out.print("Enter your name: ");'})}),e.jsx("p",{children:e.jsx("code",{children:"String name = input.next();"})}),e.jsx("p",{children:e.jsx("code",{children:"input.nextLine();"})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"nextInt()"}),e.jsxs(n,{children:[e.jsxs(s,{children:[e.jsxs("p",{children:[e.jsx("code",{children:"nextInt()"})," will give us the value entered by the user as an integer."]}),e.jsxs("p",{children:["An important note is: We may have to scan in the new line character afterwards, so we often simply have a ",e.jsx("code",{children:"input.nextLine();"})]})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"Scanner input = new Scanner(System.in);"})}),e.jsx("p",{children:e.jsx("code",{children:'System.out.print("Enter your age: ");'})}),e.jsx("p",{children:e.jsx("code",{children:"int age = input.nextInt();"})}),e.jsx("p",{children:e.jsx("code",{children:"input.nextLine();"})})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"nextDouble()"}),e.jsxs(n,{children:[e.jsxs(s,{children:[e.jsxs("p",{children:[e.jsx("code",{children:"nextInt()"})," will give us the value entered by the user as a double."]}),e.jsxs("p",{children:["An important note is: We may have to scan in the new line character afterwards, so we often simply have a ",e.jsx("code",{children:"input.nextLine();"})]})]}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"Scanner input = new Scanner(System.in);"})}),e.jsx("p",{children:e.jsx("code",{children:'System.out.print("Enter your age: ");'})}),e.jsx("p",{children:e.jsx("code",{children:"double age = input.nextDouble();"})}),e.jsx("p",{children:e.jsx("code",{children:"input.nextLine();"})})]})]})]}),e.jsx("section",{children:e.jsx("p",{children:"We won't go over all of them, as we will explore them during the in-class coding exercise later."})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Closing the Scanner"}),e.jsxs(n,{children:[e.jsx(s,{children:e.jsxs("p",{children:["In order to ensure we don't lock the system input to our program, at the end of our code, we should ",e.jsx("code",{children:"close"})," the input for the scanner"]})}),e.jsxs(s,{children:[e.jsx("p",{children:e.jsx("code",{children:"Scanner input = new Scanner(System.in);"})}),e.jsx("p",{children:"//Code"}),e.jsx("p",{children:e.jsx("code",{children:"input.close();"})})]})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Operators in Java"})}),e.jsx("section",{children:e.jsx("p",{children:"As we saw a little in the Lab last week, we have very similar operators as in Python, with some slight differences."})}),e.jsx("section",{children:e.jsx("div",{className:"text-[16pt]",children:e.jsxs("table",{children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("td",{children:"Operator"}),e.jsx("td",{children:"Use"}),e.jsx("td",{children:"Differences/Limitations"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:"+"}),e.jsx("td",{children:"Adds two values together"}),e.jsx("td",{children:"If strings are present, concatenate. Otherwise, attempts to add two values. Some types, such as booleans cannot be added together."})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"-"}),e.jsx("td",{children:"Finds the differences of two values"}),e.jsx("td",{children:"Cannot subtract from a string (same reason as Python)"})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"*"}),e.jsx("td",{children:"Multiples two values together"}),e.jsx("td",{children:'Must be the same type/"multiply-able"'})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"/"}),e.jsx("td",{children:"Divides two values"}),e.jsx("td",{children:`Must be the same type/"divide-able"; No such thing as // for integer division. / is the primary method of division in Java. If they're both integers, it'll integer divide. If one is a floating point, it'll floating point divide.`})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"%"}),e.jsx("td",{children:"Divides two values, returns remainder (mod)"}),e.jsx("td",{children:'Must be the same type/"divide-able"'})]})]})]})})}),e.jsx("section",{children:e.jsx("div",{className:"text-[14pt]",children:e.jsxs("table",{children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("td",{children:"Operator"}),e.jsx("td",{children:"Use"}),e.jsx("td",{children:"Example"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:"+="}),e.jsx("td",{children:"Updates the variable with the added value to it."}),e.jsx("td",{children:e.jsxs("p",{children:[e.jsx("code",{children:"int x = 0;"}),e.jsx("br",{}),e.jsx("code",{children:"x += 3;"}),e.jsx("br",{}),e.jsx("code",{children:"x -> 3;"})]})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"-="}),e.jsx("td",{children:"Updates the variable with the subtracted value."}),e.jsx("td",{children:e.jsxs("p",{children:[e.jsx("code",{children:"int x = 10;"}),e.jsx("br",{}),e.jsx("code",{children:"x -= 3;"}),e.jsx("br",{}),e.jsx("code",{children:"x -> 7;"})]})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"*="}),e.jsx("td",{children:"Updates the variable with the multiplied value."}),e.jsx("td",{children:e.jsxs("p",{children:[e.jsx("code",{children:"int x = 25;"}),e.jsx("br",{}),e.jsx("code",{children:"x *= 20;"}),e.jsx("br",{}),e.jsx("code",{children:"x -> 500;"})]})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"/="}),e.jsx("td",{children:"Updates the variable with the divided value."}),e.jsx("td",{children:e.jsxs("p",{children:[e.jsx("code",{children:"int x = 24;"}),e.jsx("br",{}),e.jsx("code",{children:"x /= 3;"}),e.jsx("br",{}),e.jsx("code",{children:"x -> 8;"})]})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"%="}),e.jsx("td",{children:"Updates the variable by modulating it."}),e.jsx("td",{children:e.jsxs("p",{children:[e.jsx("code",{children:"int x = 25;"}),e.jsx("br",{}),e.jsx("code",{children:"x %= 5;"}),e.jsx("br",{}),e.jsx("code",{children:"x -> 0;"})]})})]})]})]})})}),e.jsx("section",{children:e.jsx("div",{className:"text-[16pt]",children:e.jsxs("table",{children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("td",{children:"Operator"}),e.jsx("td",{children:"Use"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:">"}),e.jsx("td",{children:"True if left value is greater than right value"})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"<"}),e.jsx("td",{children:"True if left value is less than right value"})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"=="}),e.jsx("td",{children:"True if left value is equal to the right value"})]}),e.jsxs("tr",{children:[e.jsx("td",{children:">="}),e.jsx("td",{children:"True if left value is greater than or equal to the right value"})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"<="}),e.jsx("td",{children:"True if left value is less than or equal to the right value"})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"!="}),e.jsx("td",{children:"True if left value is not equal to the right value"})]})]})]})})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"In Class: Input Practice"})}),e.jsx("section",{children:e.jsx("p",{children:"Note; a use-case is a situation/circumstance where you would use something. For example, a use-case of an if-statement is when we need to check if two values are the same, then running some code."})})]})]}),w=c(a);export{w as default};
