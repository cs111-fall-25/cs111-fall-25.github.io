import{w as r,q as e}from"./index-CLLJqTva.js";import"./index-BMu1d4kC.js";import{S as h,a as d}from"./index-CP53eZP4.js";import{R as n,H as i,a as t,I as s}from"./index-Dq_L-XFB.js";import{s as o}from"./java-CnbYup62.js";import"./index-H-X4gc9i.js";const c="Day 14: More Methods",j=["Pass by Value v Pass by Reference","Static v Instance","Method Overloading","Hashcode","Equals","Lab 7"],x=()=>e.jsxs(e.Fragment,{children:[e.jsx(h,{title:c,downloadHref:o}),e.jsxs(d,{children:[e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:c})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Agenda"}),e.jsx("ul",{className:"list-disc",children:j.map((a,l)=>e.jsx("li",{children:a},l))})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Pass by Value v Pass by Reference"})}),e.jsxs("section",{children:[e.jsx("p",{children:"You may have heard of Pass by Value and Pass by Reference before."}),e.jsxs("p",{children:["Java is purely a ",e.jsx("strong",{children:"Pass by Value*"})," language. This means when variables are passed into functions, the values themselves are passed in and not references to the variables."]}),e.jsx("p",{children:"However, that * is for Objects."})]}),e.jsx("section",{children:e.jsx("p",{children:"Effectively, primitive types are passed in by value. This means when we try to change the variable, the value in the original variable does not change."})}),e.jsxs("section",{children:[e.jsx("p",{children:"However, objects are the *. When an object is passed to a function, the value to the reference of the object is provided."}),e.jsx("p",{children:'This mimics a "pass by reference" as when we call methods on the object, it can directly change the object itself.'}),e.jsx("p",{children:"The same can be said with arrays, where passing an array into a function and changing that array can change the original array."})]}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(i,{children:e.jsx("p",{children:"For example, if we write a function to swap values in an array, the original array gets updated!"})}),e.jsxs(t,{children:[e.jsx(s,{children:"public static void swap(int[] a, int i, int j) {"}),e.jsx(s,{space:2,children:"int t = a[i];"}),e.jsx(s,{space:2,children:"a[i] = a[j];"}),e.jsx(s,{space:2,children:"a[j] = t;"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(i,{children:e.jsx("p",{children:"At the same time, calling a method on an object in a function can also change and update the object itself."})}),e.jsxs(t,{children:[e.jsx(s,{children:"public static void incrementAge(Student s) {"}),e.jsx(s,{space:2,children:"s.setAge(s.getAge() + 1);"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"static v instance"})}),e.jsx("section",{children:e.jsx("p",{children:"Now that we've spent some time building our own classes, we cna revisit static v instance and how they can be called differently."})}),e.jsx("section",{children:e.jsx("p",{children:"Static attaches to the class itself, while non-static or instance attaches to the object (variable) itself."})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Calling static methods"}),e.jsxs(n,{children:[e.jsxs(t,{children:[e.jsx(s,{children:"class Student {"}),e.jsx(s,{space:2,children:"public static String genName(String f, String l)  {"}),e.jsx(s,{space:4,children:'return f + " " + l;'}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{children:"}"})]}),e.jsxs(t,{children:[e.jsx(s,{children:"public static void main(String[] args) {"}),e.jsx(s,{space:2,children:'Student.genName("John", "Doe");'}),e.jsx(s,{children:"}"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Calling instance methods"}),e.jsxs("div",{className:"font-mono text-left text-[16pt]",children:[e.jsx(s,{children:"class Student {"}),e.jsx(s,{space:2,children:"public String genName() {"}),e.jsx(s,{space:4,children:"return genName(this.first, this.last);"}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{space:2,children:"public static void main(String[] args) {"}),e.jsx(s,{space:4,children:'Student s = new Student("John", "Doe");'}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{children:"}"})]})]}),e.jsx("section",{children:e.jsxs("p",{children:["Static functions can be used without information of what's in the class, but instance methods often utilize the information from the class itself. Instance methods have access to the ",e.jsx("code",{children:"this"})," keyword."]})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"When to use which?"}),e.jsxs(n,{children:[e.jsxs(i,{children:[e.jsx("p",{children:"static"}),e.jsx("ul",{children:e.jsx("li",{children:"Great when functionality can be generalized"})})]}),e.jsxs(i,{children:[e.jsx("p",{children:"instance"}),e.jsx("ul",{children:e.jsx("li",{children:"Better when information from the object (inside the class) is useful/required"})})]})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Method Overloading"})}),e.jsx("section",{children:e.jsx("p",{children:"The ability to write one method with different parameters leading to different return types."})}),e.jsx("section",{children:e.jsxs("div",{className:"font-mono text-left text-[16pt]",children:[e.jsx(s,{children:"public static int add(int a, int b) {"}),e.jsx(s,{space:2,children:"return a + b;"}),e.jsx(s,{children:"}"}),e.jsx(s,{children:"public static float add(float a, float b) {"}),e.jsx(s,{space:2,children:"return a + b;"}),e.jsx(s,{children:"}"})]})}),e.jsx("section",{children:e.jsx("p",{children:"A form of polymorphism we've already seen in the previous week by calling different versions of the function with different parameters."})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Hashcode"})}),e.jsx("section",{children:e.jsx("p",{children:"At its core, it's a way Object are identifiable based on their hashcode. This hashcode can also be used for more complex situations; such as collections and identifying means of sorting objects."})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Why does this matter?"})}),e.jsx("section",{children:e.jsx("p",{children:"You will look at how these hashcodes are generated in either CS112 and/or CS245. However, I thought it would be good to look at it now, given we've already seen this when we printed out an Array and an Object itself."})}),e.jsx("section",{children:e.jsxs("p",{children:["At the same time, this is often used in the ",e.jsx("code",{children:".equals"})," method when seeing if two objects are equal!"]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Equals"})}),e.jsx("section",{children:e.jsxs("p",{children:["Speaking of which, we can also replace the ",e.jsx("code",{children:".equals"})," method for our own classes and see if two objects are equal to each other!"]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(i,{children:[e.jsxs("p",{children:["This can be done using the ",e.jsx("code",{children:"instanceof"})," keyword. This will check if the object is already an instance of the current class (Student in this case)."]}),e.jsxs("p",{children:["If it isn't, we can simply return ",e.jsx("code",{children:"false"})," since they can't be the same."]})]}),e.jsxs(t,{children:[e.jsx(s,{children:"@Override"}),e.jsx(s,{children:"public boolean equals(Object o) {"}),e.jsx(s,{space:2,children:"if(!(o instanceof Student)) {"}),e.jsx(s,{space:4,children:"return false;"}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{space:2,children:"Student s = (Student) o;"}),e.jsx(s,{space:2,children:"if(s.getName().equals(this.name)) {"}),e.jsx(s,{space:4,children:"return true;"}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{space:2,children:"return false;"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsx(i,{children:e.jsx("p",{children:"After this, we can cast our Object into the current class (Student). We'll see this more later when we talk about inheritance properly, but we can cast the object into a Student type then!"})}),e.jsxs(t,{children:[e.jsx(s,{children:"@Override"}),e.jsx(s,{children:"public boolean equals(Object o) {"}),e.jsx(s,{space:2,children:"if(!(o instanceof Student)) {"}),e.jsx(s,{space:4,children:"return false;"}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{space:2,children:"Student s = (Student) o;"}),e.jsx(s,{space:2,children:"if(s.getName().equals(this.name)) {"}),e.jsx(s,{space:4,children:"return true;"}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{space:2,children:"return false;"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(n,{children:[e.jsxs(i,{children:[e.jsx("p",{children:"From here, we can check for equality with different elements of the object."}),e.jsx("p",{children:"The example to the right simply checks if the names are the same. We can check for more values if we want, but this is a simple example."})]}),e.jsxs(t,{children:[e.jsx(s,{children:"@Override"}),e.jsx(s,{children:"public boolean equals(Object o) {"}),e.jsx(s,{space:2,children:"if(!(o instanceof Student)) {"}),e.jsx(s,{space:4,children:"return false;"}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{space:2,children:"Student s = (Student) o;"}),e.jsx(s,{space:2,children:"if(s.getName().equals(this.name)) {"}),e.jsx(s,{space:4,children:"return true;"}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{space:2,children:"return false;"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Lab 7: Shopping Cart"})})]})]}),g=r(x);export{g as default};
