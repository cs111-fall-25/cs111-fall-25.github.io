import{w as a,t as e}from"./index-CiYINecr.js";import"./index-ZQYjAMWU.js";import{S as h,a as d}from"./index-DiHAfNbc.js";import{R as i,H as n,a as c,I as s}from"./index-fNlsy8Tv.js";import{s as o}from"./java-CnbYup62.js";import"./index-CFi-U94j.js";const x="/assets/Access-Modifiers-oIlhPF3D.png",r="Day 10: OOP 1",j=["Reminder of Today","Object Oriented Programming Recap","Class","Field Variables/Members","Constructor","Methods","This","Quiz 4","In Class"],p=()=>e.jsxs(e.Fragment,{children:[e.jsx(h,{title:r,downloadHref:o}),e.jsxs(d,{children:[e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:r})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Agenda"}),e.jsx("ul",{className:"list-disc",children:j.map((l,t)=>e.jsx("li",{children:l},t))})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Reminder for today!"}),e.jsx("p",{children:"Reminder for today's lecture. Watch this lecture before class. We'll do the Quiz at the start of class, you'll then leave and come back for your allocated timeslot for the Project 1 Code Review."})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"OOP"})}),e.jsxs("section",{children:[e.jsx("p",{children:"Reminder that Classes and Objects are the heart of OOP."}),e.jsx("p",{children:"We talked about Encapsulation, Abstraction, Polymorphism, and Inheritance a little last week."})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"4 Pillars Recap"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Abstraction"}),e.jsx("p",{children:"The ability to take code that has similar functionality and move it into a more generalized implementation."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Encapsulation"}),e.jsxs("p",{children:["The ability to hide and store data within some class or object. This is heavily shown using the ",e.jsx("code",{children:"private"})," and ",e.jsx("code",{children:"public"})," keywords."]}),e.jsx("p",{children:"Data is hidden, with methods exposing and manipulating the data."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Inheritance"}),e.jsx("p",{children:"The ability for classes to inherit data from parent classes using the extends and super keywords."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Polymorphism"}),e.jsx("p",{children:"The ability to have different implementations for methods/functions, with different function parameters."})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Classes and Objects"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Classes"}),e.jsx("p",{children:"The structure that defines data and how methods interact with each other and with the inner data."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Objects"}),e.jsx("p",{children:"Actual instance or copies from the class (blueprint)."}),e.jsx("p",{children:'Actual "thing" we will use.'}),e.jsx("p",{children:"uses the class as the structure, while the object is the instance we use."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Class"}),e.jsx("p",{children:"Let's look at the structure of a class now!"})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Structure"})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"A class follows the structure to the right:"}),e.jsx("p",{children:"First thing to note: the name of the file must match the name of the class in order for our code to work."}),e.jsx("p",{children:e.jsx("code",{children:"ClassName.java"})})]}),e.jsxs(c,{children:[e.jsx(s,{children:"public class ClassName {"}),e.jsx(s,{space:1,children:"// field variables/members"}),e.jsx(s,{space:1,children:"public ClassName(params) {"}),e.jsx(s,{space:2,children:"// Constructor"}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{space:1,children:"// Methods"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Field Variables/Members"})}),e.jsxs("section",{children:[e.jsx("p",{children:"In our classes, we can have variables that exist throughout the class. These are called field variables or members."}),e.jsx("p",{children:"These variables belong to the class itself."})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Field Variables in Action"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"These variables are created as normal variables but we put them inside the class itself."}),e.jsxs("p",{children:["These are also preceded by either ",e.jsx("code",{children:"private"})," or ",e.jsx("code",{children:"public"})," or nothing at all."]})]}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsx(s,{space:1,children:"private String name;"}),e.jsx(s,{space:1,children:"public String id;"}),e.jsx(s,{space:1,children:"byte age;"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Field Variables in Action"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["In the example to the right, we have a ",e.jsx("strong",{children:"private"})," name for the user, a ",e.jsx("strong",{children:"public"})," id, and an age that has no public/private identifier. This means the ",e.jsx("code",{children:"age"})," variable has a ",e.jsx("strong",{children:"default"})," scope."]})}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsx(s,{space:1,children:"private String name;"}),e.jsx(s,{space:1,children:"public String id;"}),e.jsx(s,{space:1,children:"byte age;"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Access Modifiers"}),e.jsx("img",{src:x,alt:"Access Modifiers Diagram"})]}),e.jsx("section",{children:e.jsxs("table",{children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("td",{children:"Modifier"}),e.jsx("td",{children:"Class"}),e.jsx("td",{children:"Package"}),e.jsx("td",{children:"Subclass"}),e.jsx("td",{children:"World"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:"public"}),e.jsx("td",{children:"y"}),e.jsx("td",{children:"y"}),e.jsx("td",{children:"y"}),e.jsx("td",{children:"y"})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"protected"}),e.jsx("td",{children:"y"}),e.jsx("td",{children:"y"}),e.jsx("td",{children:"y"}),e.jsx("td",{children:"n"})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"default"}),e.jsx("td",{children:"y"}),e.jsx("td",{children:"y"}),e.jsx("td",{children:"n"}),e.jsx("td",{children:"n"})]}),e.jsxs("tr",{children:[e.jsx("td",{children:"private"}),e.jsx("td",{children:"y"}),e.jsx("td",{children:"n"}),e.jsx("td",{children:"n"}),e.jsx("td",{children:"n"})]})]})]})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Field Variables in Action"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["This means our name is only visible in the class itself. Other classes can see the id. The age is visible to the class and technically to what we call the ",e.jsx("code",{children:"package"})]})}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsx(s,{space:1,children:"private String name;"}),e.jsx(s,{space:1,children:"public String id;"}),e.jsx(s,{space:1,children:"byte age;"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Packages?"}),e.jsx("p",{children:"Packages are a way we can group and organize code together. We may use packages later in the semester but for now, we will continue to write code without them."})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Constructor"})}),e.jsx("section",{children:e.jsx("p",{children:"Our constructor is the method with the same name as our class. This is the method called when we create a new object of the class."})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["In the example to the right, the constructor is the ",e.jsx("code",{children:"public User(String newName)"})," function"]})}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsx(s,{space:1,children:"private String name;"}),e.jsx(s,{space:1,children:e.jsx("span",{className:"text-usf-yellow",children:"public User(String newName) {"})}),e.jsx(s,{space:2,children:e.jsx("span",{className:"text-usf-yellow",children:"name = newName;"})}),e.jsx(s,{space:1,children:e.jsx("span",{className:"text-usf-yellow",children:"}"})}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"When we create a new instance of the class with a new object, we're actually calling the constructor!"})}),e.jsxs(c,{children:[e.jsxs(s,{children:["User u = new ",e.jsx("span",{className:"text-usf-yellow",children:'User("Edward")'}),";"]}),e.jsx(s,{children:'// User("Edward") is calling the User(String newName) method!'})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"For example, when we created a new Scanner object, we actually were calling one of the constructors for the Scanner class!"})}),e.jsx(c,{children:e.jsx(s,{children:"Scanner input = new Scanner(System.in);"})})]})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Multiple Constructors"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"With Java, we can also create multiple constructors. These will vary with the function parameters and how the functions are implemented."})}),e.jsxs(c,{children:[e.jsx(s,{children:"public User(String newName) {"}),e.jsx(s,{space:1,children:"// implementation"}),e.jsx(s,{children:"}"}),e.jsx(s,{children:"public User(String fName, String lName) {"}),e.jsx(s,{space:1,children:"// implementation"}),e.jsx(s,{children:"}"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Multiple Constructors"}),e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["This is actually the concept of ",e.jsx("strong",{children:"polymorphism"})," in action! We are able to have multiple forms for a single function!"]})}),e.jsxs(c,{children:[e.jsx(s,{children:"public User(String newName) {"}),e.jsx(s,{space:1,children:"name = newName;"}),e.jsx(s,{children:"}"}),e.jsx(s,{children:"public User(String fName, String lName) {"}),e.jsx(s,{space:1,children:"name = fName + lName;"}),e.jsx(s,{children:"}"})]})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Methods"})}),e.jsxs("section",{children:[e.jsx("p",{children:"Methods are what we call functions that belong inside a function. Methods are functions. However, not all functions are methods."}),e.jsx("p",{children:"Technically, the static functions we wrote last week aren't methods as they don't belong to the object, but exist on the class itself. They don't use any data belonging to the object either."})]}),e.jsx("section",{children:e.jsxs("p",{children:["Methods primarily use the data from the class itself and don't use the ",e.jsx("code",{children:"static"})," keyword. This makes them ",e.jsx("strong",{children:"non-static"})," or also called ",e.jsx("strong",{children:"instance"})," methods."]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsxs("p",{children:["To write a method, we simply need the ",e.jsx("code",{children:"public"}),"/",e.jsx("code",{children:"private"})," keyword, followed by the return type, then the name of the method."]}),e.jsx("p",{children:"if we need parameters to the method, we can specify them in the parentheses."})]}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsx(s,{space:1,children:"private String name;"}),e.jsx(s,{space:1,children:"public String getName() {"}),e.jsx(s,{space:2,children:"return name;"}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(n,{children:e.jsxs("p",{children:["For example with ",e.jsx("code",{children:"getBirthYear"}),", where we take the current year as a parameter and return the difference of the current year and the stored age."]})}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsx(s,{space:1,children:"byte age;"}),e.jsx(s,{space:1,children:"public int getBirthYear(int currYear) {"}),e.jsx(s,{space:2,children:"return currYear - age;"}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{children:"}"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Variable Scoping"})}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Class Scope"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"Field variables/members exist in the class itself."}),e.jsx("p",{children:"This means any instance methods can see and use the variables."})]}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsx(s,{space:1,children:"private String name;"}),e.jsx(s,{space:1,children:"// exist throughout the class"}),e.jsx(s,{children:"}"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Method Scope (params)"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"Parameters/variables defined from the method header in the parentheses only exist in the method itself."}),e.jsxs("p",{children:["In the example to the right, ",e.jsx("code",{children:"currYear"})," only exists in the ",e.jsx("code",{children:"getBirthYear"})," method."]})]}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsx(s,{space:1,children:"public int getBirthYear(int currYear) {"}),e.jsx(s,{space:2,children:"// currYear doesn't exist outside getBirthYear"}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{children:"}"})]})]})]}),e.jsxs("section",{children:[e.jsx("p",{className:"text-usf-yellow",children:"Method Scope (local defined)"}),e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"Variables defined in the methods, but not in the parameters, also only exist in the method themselves."}),e.jsx("p",{children:"Values are returned from methods/functions, but not the variables themselves."})]}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsx(s,{space:1,children:"public int getBirthYear(int currYear) {"}),e.jsx(s,{space:2,children:"int year = currYear - age;"}),e.jsx(s,{space:2,children:"return year;"}),e.jsx(s,{space:2,children:"// year only exists in the method, but the value leaves the function."}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{children:"}"})]})]})]}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"this"})}),e.jsxs("section",{children:[e.jsxs("p",{children:["In Java, if we want to reference anything in the class, within any method, we can use the ",e.jsx("code",{children:"this"})," keyword."]}),e.jsxs("p",{children:["Any method or variable within the class is accessible using the ",e.jsx("code",{children:"this"})," keyword."]})]}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"This is useful when we need to specify which variable we are referencing."}),e.jsxs("p",{children:["In the example the right, ",e.jsx("code",{children:"name"})," appears as both a field variable ",e.jsx("strong",{children:"and"})," as a parameter to the constructor."]}),e.jsxs("p",{children:["To avoid confusion, using the ",e.jsx("code",{children:"this"})," keyword can help us differentiate between the two."]})]}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsxs(s,{space:1,children:["private String ",e.jsx("span",{className:"bg-emerald-200 dark:bg-emerald-800",children:"name"}),";"]}),e.jsxs(s,{space:1,children:["public User (String ",e.jsx("span",{className:"bg-red-200 dark:bg-red-800",children:"name"}),") {"]}),e.jsxs(s,{space:2,children:["this.",e.jsx("span",{className:"bg-emerald-200 dark:bg-emerald-800",children:"name"})," = ",e.jsx("span",{className:"bg-red-200 dark:bg-red-800",children:"name"}),";"]}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{space:0,children:"}"})]})]})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsxs(n,{children:[e.jsx("p",{children:"Concurrently, this can help us call another constructor too!"}),e.jsxs("p",{children:["If we use ",e.jsx("code",{children:"this"})," as a method, it naturally will call another constructor, in this case, calling the constructor that takes in a single String."]})]}),e.jsxs(c,{children:[e.jsx(s,{children:"public class User {"}),e.jsx(s,{space:1,children:"public User(String name) {"}),e.jsx(s,{space:2,children:"this.name = name;"}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{space:1,children:"public User(String fName, String lName) {"}),e.jsx(s,{space:2,children:'this(fName + " " + lName);'}),e.jsx(s,{space:1,children:"}"}),e.jsx(s,{space:0,children:"}"})]})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Example Class"})}),e.jsx("section",{children:e.jsxs("div",{className:"text-left font-mono text-[16pt]",children:[e.jsx(s,{children:"public class Stationary {"}),e.jsx(s,{space:2,children:"private String name;"}),e.jsx(s,{space:2,children:"private String description;"}),e.jsx(s,{space:2,children:"public Stationary(String name, String description) {"}),e.jsx(s,{space:4,children:"this.name = name;"}),e.jsx(s,{space:4,children:"this.description = description;"}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{space:2,children:"public String getName() {"}),e.jsx(s,{space:4,children:"return this.name;"}),e.jsx(s,{space:2,children:"}"}),e.jsx(s,{space:0,children:"}"})]})}),e.jsx("section",{children:e.jsx("p",{className:"text-usf-yellow",children:"Calling methods"})}),e.jsx("section",{children:e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"In order to call a method, we must call it on the variable itself."})}),e.jsxs(c,{children:[e.jsx(s,{children:'User ed = new User("Edward");'}),e.jsxs(s,{children:["System.out.println(",e.jsx("span",{className:"text-usf-yellow",children:"ed.getName()"}),")"]}),e.jsx(s,{children:'// gives us "Edward"'}),e.jsx("br",{}),e.jsx(s,{children:'User amy = new User("Amy");'}),e.jsxs(s,{children:["System.out.println(",e.jsx("span",{className:"text-usf-yellow",children:"amy.getName()"}),")"]}),e.jsx(s,{children:'// gives us "Amy"'})]})]})}),e.jsxs("section",{children:[e.jsxs(i,{children:[e.jsx(n,{children:e.jsx("p",{children:"Since these methods aren't static, they must be called on the objects. If we call them on the class, our code would fail to compile."})}),e.jsxs(c,{children:[e.jsx(s,{children:'User u = new User("Edward");'}),e.jsx(s,{children:"System.out.println(User.getName());"}),e.jsx(s,{children:"// crashes due to getName not being static."})]})]}),e.jsxs("div",{className:"text-left font-mono text-[16pt] bg-gray-800 text-gray-400 px-2 py-1 font-light",children:[e.jsx("p",{children:"Error:"}),e.jsx("p",{children:"non-static method getName() cannot be referenced from a static context"}),e.jsx("p",{children:"User.getName();"}),e.jsx("p",{children:"^__________^"})]})]}),e.jsx("section",{children:e.jsx("p",{children:"Alright that's it for the lecture/content portion. Please come to class to do Quiz 4. We will do the Code Reviews afterwards. Please come on time for your slot. If you're late, it'll be skipped and you'll receive a 0 for the Code Review portion, impacting your grade heavily. While other students are doing the Code Review, please work on the in class."})})]})]}),y=a(p);export{y as default};
